/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Ushur UI API Specification
 * This specification defines APIs used by Ushur UI
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://ushur/api".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AccumulatedData
 */
export interface AccumulatedData {
    /**
     * 
     * @type {string}
     * @memberof AccumulatedData
     */
    sid?: string;
    /**
     * 
     * @type {string}
     * @memberof AccumulatedData
     */
    engagementStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof AccumulatedData
     */
    module?: string;
    /**
     * 
     * @type {string}
     * @memberof AccumulatedData
     */
    uetag?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AccumulatedData
     */
    choiceOptions?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AccumulatedData
     */
    promptText?: string;
    /**
     * 
     * @type {string}
     * @memberof AccumulatedData
     */
    input_type?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AccumulatedData
     */
    horizontalBars?: boolean;
    /**
     * 
     * @type {AccumulatedDataAddProps}
     * @memberof AccumulatedData
     */
    addProps?: AccumulatedDataAddProps;
}
/**
 * 
 * @export
 * @interface AccumulatedDataAddProps
 */
export interface AccumulatedDataAddProps {
    /**
     * 
     * @type {string}
     * @memberof AccumulatedDataAddProps
     */
    passSendWelcomeMsgToUser?: string;
    /**
     * 
     * @type {string}
     * @memberof AccumulatedDataAddProps
     */
    RelMemOnOpenResponse?: string;
}
/**
 * 
 * @export
 * @interface ContinueUshurRequest
 */
export interface ContinueUshurRequest {
    /**
     * 
     * @type {string | number}
     * @memberof ContinueUshurRequest
     */
    response?: string | number;
    /**
     * 
     * @type {string}
     * @memberof ContinueUshurRequest
     */
    sid?: string;
}
/**
 * 
 * @export
 * @interface ContinueUshurResponse
 */
export interface ContinueUshurResponse {
    /**
     * 
     * @type {Array<AccumulatedData>}
     * @memberof ContinueUshurResponse
     */
    accumulatedData?: Array<AccumulatedData>;
}
/**
 * 
 * @export
 * @interface CreateTagRequest
 */
export interface CreateTagRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateTagRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTagRequest
     */
    scope?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTagRequest
     */
    cmd?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTagRequest
     */
    tokenId?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTagRequest
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTagRequest
     */
    apiVer?: string;
    /**
     * 
     * @type {CreateTagRequestContent}
     * @memberof CreateTagRequest
     */
    content?: CreateTagRequestContent;
}
/**
 * 
 * @export
 * @interface CreateTagRequestContent
 */
export interface CreateTagRequestContent {
    /**
     * 
     * @type {string}
     * @memberof CreateTagRequestContent
     */
    campaignId?: string;
    /**
     * 
     * @type {Array<{ [key: string]: any; }>}
     * @memberof CreateTagRequestContent
     */
    vars?: Array<{ [key: string]: any; }>;
}
/**
 * 
 * @export
 * @interface CreateTagResponse
 */
export interface CreateTagResponse {
    /**
     * 
     * @type {number}
     * @memberof CreateTagResponse
     */
    respCode?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateTagResponse
     */
    respText?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTagResponse
     */
    status?: string;
}
/**
 * 
 * @export
 * @interface CreateWorkflowLegacyRequest
 */
export interface CreateWorkflowLegacyRequest {
    /**
     * A frontend generated id, used by Canvas 2.0
     * @type {string}
     * @memberof CreateWorkflowLegacyRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkflowLegacyRequest
     */
    tokenId?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkflowLegacyRequest
     */
    cmd?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkflowLegacyRequest
     */
    campaignId?: string;
    /**
     * 
     * @type {any}
     * @memberof CreateWorkflowLegacyRequest
     */
    Languages?: any;
    /**
     * 
     * @type {CreateWorkflowLegacyRequestCampaignData}
     * @memberof CreateWorkflowLegacyRequest
     */
    campaignData?: CreateWorkflowLegacyRequestCampaignData;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkflowLegacyRequest
     */
    actionContext?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkflowLegacyRequest
     */
    apiVer?: string;
}
/**
 * 
 * @export
 * @interface CreateWorkflowLegacyRequestCampaignData
 */
export interface CreateWorkflowLegacyRequestCampaignData {
    /**
     * 
     * @type {string}
     * @memberof CreateWorkflowLegacyRequestCampaignData
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkflowLegacyRequestCampaignData
     */
    version?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkflowLegacyRequestCampaignData
     */
    author?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkflowLegacyRequestCampaignData
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkflowLegacyRequestCampaignData
     */
    IsInvisible?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkflowLegacyRequestCampaignData
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkflowLegacyRequestCampaignData
     */
    virtualPhoneNumber?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateWorkflowLegacyRequestCampaignData
     */
    visuallyUshur?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkflowLegacyRequestCampaignData
     */
    AppContext?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkflowLegacyRequestCampaignData
     */
    prompt?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateWorkflowLegacyRequestCampaignData
     */
    skipMenu?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkflowLegacyRequestCampaignData
     */
    lastEdited?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkflowLegacyRequestCampaignData
     */
    lang?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateWorkflowLegacyRequestCampaignData
     */
    isEmptyUshur?: boolean;
    /**
     * 
     * @type {any}
     * @memberof CreateWorkflowLegacyRequestCampaignData
     */
    options?: any;
    /**
     * 
     * @type {CreateWorkflowLegacyRequestCampaignDataExpiry}
     * @memberof CreateWorkflowLegacyRequestCampaignData
     */
    expiry?: CreateWorkflowLegacyRequestCampaignDataExpiry;
    /**
     * 
     * @type {CreateWorkflowLegacyRequestCampaignDataRoutines}
     * @memberof CreateWorkflowLegacyRequestCampaignData
     */
    routines?: CreateWorkflowLegacyRequestCampaignDataRoutines;
    /**
     * 
     * @type {any}
     * @memberof CreateWorkflowLegacyRequestCampaignData
     */
    ui?: any;
    /**
     * 
     * @type {any}
     * @memberof CreateWorkflowLegacyRequestCampaignData
     */
    visualData?: any;
}
/**
 * 
 * @export
 * @interface CreateWorkflowLegacyRequestCampaignDataExpiry
 */
export interface CreateWorkflowLegacyRequestCampaignDataExpiry {
    /**
     * 
     * @type {number}
     * @memberof CreateWorkflowLegacyRequestCampaignDataExpiry
     */
    days?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateWorkflowLegacyRequestCampaignDataExpiry
     */
    hours?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateWorkflowLegacyRequestCampaignDataExpiry
     */
    minutes?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkflowLegacyRequestCampaignDataExpiry
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface CreateWorkflowLegacyRequestCampaignDataRoutines
 */
export interface CreateWorkflowLegacyRequestCampaignDataRoutines {
    /**
     * 
     * @type {EmptyRoutineUshurInitialRoutine}
     * @memberof CreateWorkflowLegacyRequestCampaignDataRoutines
     */
    Ushur_Initial_Routine?: EmptyRoutineUshurInitialRoutine;
    /**
     * 
     * @type {CreateWorkflowLegacyRequestCampaignDataRoutinesOnReturn}
     * @memberof CreateWorkflowLegacyRequestCampaignDataRoutines
     */
    On_Return?: CreateWorkflowLegacyRequestCampaignDataRoutinesOnReturn;
}
/**
 * 
 * @export
 * @interface CreateWorkflowLegacyRequestCampaignDataRoutinesOnReturn
 */
export interface CreateWorkflowLegacyRequestCampaignDataRoutinesOnReturn {
    /**
     * 
     * @type {string}
     * @memberof CreateWorkflowLegacyRequestCampaignDataRoutinesOnReturn
     */
    UeTag?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkflowLegacyRequestCampaignDataRoutinesOnReturn
     */
    action?: string;
    /**
     * 
     * @type {EmptyRoutineUshurInitialRoutineParams}
     * @memberof CreateWorkflowLegacyRequestCampaignDataRoutinesOnReturn
     */
    params?: EmptyRoutineUshurInitialRoutineParams;
}
/**
 * 
 * @export
 * @interface CreateWorkflowVariableRequest
 */
export interface CreateWorkflowVariableRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateWorkflowVariableRequest
     */
    cmd?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkflowVariableRequest
     */
    scope?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkflowVariableRequest
     */
    tokenId?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkflowVariableRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkflowVariableRequest
     */
    apiVer?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkflowVariableRequest
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkflowVariableRequest
     */
    campaignId?: string;
    /**
     * 
     * @type {Array<CreateWorkflowVariableRequestContent>}
     * @memberof CreateWorkflowVariableRequest
     */
    content?: Array<CreateWorkflowVariableRequestContent>;
}
/**
 * 
 * @export
 * @interface CreateWorkflowVariableRequestContent
 */
export interface CreateWorkflowVariableRequestContent {
    /**
     * 
     * @type {Array<WorkflowVariablesVars>}
     * @memberof CreateWorkflowVariableRequestContent
     */
    vars?: Array<WorkflowVariablesVars>;
}
/**
 * 
 * @export
 * @interface DeleteWorkflowLegacyRequest
 */
export interface DeleteWorkflowLegacyRequest {
    /**
     * 
     * @type {string}
     * @memberof DeleteWorkflowLegacyRequest
     */
    campaignId?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteWorkflowLegacyRequest
     */
    cmd?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteWorkflowLegacyRequest
     */
    tokenId?: string;
    /**
     * 
     * @type {string}
     * @memberof DeleteWorkflowLegacyRequest
     */
    apiVer?: string;
    /**
     * 
     * @type {any}
     * @memberof DeleteWorkflowLegacyRequest
     */
    Languages?: any;
    /**
     * 
     * @type {string}
     * @memberof DeleteWorkflowLegacyRequest
     */
    actionContext?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DeleteWorkflowLegacyRequest
     */
    inclAllXlatedUshurs?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DeleteWorkflowLegacyRequest
     */
    removeAssociations?: boolean;
}
/**
 * 
 * @export
 * @interface EmptyRoutine
 */
export interface EmptyRoutine {
    /**
     * 
     * @type {EmptyRoutineUshurInitialRoutine}
     * @memberof EmptyRoutine
     */
    Ushur_Initial_Routine?: EmptyRoutineUshurInitialRoutine;
}
/**
 * 
 * @export
 * @interface EmptyRoutineUshurInitialRoutine
 */
export interface EmptyRoutineUshurInitialRoutine {
    /**
     * 
     * @type {string}
     * @memberof EmptyRoutineUshurInitialRoutine
     */
    action?: string;
    /**
     * 
     * @type {EmptyRoutineUshurInitialRoutineParams}
     * @memberof EmptyRoutineUshurInitialRoutine
     */
    params?: EmptyRoutineUshurInitialRoutineParams;
}
/**
 * 
 * @export
 * @interface EmptyRoutineUshurInitialRoutineParams
 */
export interface EmptyRoutineUshurInitialRoutineParams {
    /**
     * 
     * @type {string}
     * @memberof EmptyRoutineUshurInitialRoutineParams
     */
    menuId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EmptyRoutineUshurInitialRoutineParams
     */
    stayInCampaign?: boolean;
}
/**
 * 
 * @export
 * @interface FormElement
 */
export interface FormElement {
    /**
     * 
     * @type {string}
     * @memberof FormElement
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof FormElement
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof FormElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof FormElement
     */
    type?: string;
    /**
     * 
     * @type {FormTextInput}
     * @memberof FormElement
     */
    data?: FormTextInput;
}
/**
 * 
 * @export
 * @interface FormInput
 */
export interface FormInput {
}
/**
 * 
 * @export
 * @interface FormModule
 */
export interface FormModule extends ModuleBase {
    /**
     * 
     * @type {Array<FormElement>}
     * @memberof FormModule
     */
    fields: Array<FormElement>;
}
/**
 * 
 * @export
 * @interface FormTextInput
 */
export interface FormTextInput {
    /**
     * 
     * @type {string}
     * @memberof FormTextInput
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof FormTextInput
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof FormTextInput
     */
    text?: string;
    /**
     * 
     * @type {string}
     * @memberof FormTextInput
     */
    fieldValue?: string;
    /**
     * 
     * @type {string}
     * @memberof FormTextInput
     */
    validationType?: string;
    /**
     * 
     * @type {string}
     * @memberof FormTextInput
     */
    validationErrorTxt?: string;
}
/**
 * 
 * @export
 * @interface GetDatatableTagsRequest
 */
export interface GetDatatableTagsRequest {
    /**
     * 
     * @type {string}
     * @memberof GetDatatableTagsRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDatatableTagsRequest
     */
    AppContext?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDatatableTagsRequest
     */
    scope?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDatatableTagsRequest
     */
    cmd?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDatatableTagsRequest
     */
    tokenId?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDatatableTagsRequest
     */
    apiVer?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDatatableTagsRequest
     */
    type?: string;
}
/**
 * 
 * @export
 * @interface GetDatatableTagsResponse
 */
export interface GetDatatableTagsResponse {
    /**
     * 
     * @type {any}
     * @memberof GetDatatableTagsResponse
     */
    id?: any;
    /**
     * 
     * @type {Array<{ [key: string]: any; }>}
     * @memberof GetDatatableTagsResponse
     */
    content?: Array<{ [key: string]: any; }>;
}
/**
 * 
 * @export
 * @interface GetDatatableTagsResponseContentId
 */
export interface GetDatatableTagsResponseContentId {
    /**
     * 
     * @type {WorkflowVariablesId}
     * @memberof GetDatatableTagsResponseContentId
     */
    _id?: WorkflowVariablesId;
}
/**
 * 
 * @export
 * @interface GetDatatableTagsResponseContentItem
 */
export interface GetDatatableTagsResponseContentItem {
    /**
     * 
     * @type {string}
     * @memberof GetDatatableTagsResponseContentItem
     */
    prefix?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDatatableTagsResponseContentItem
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDatatableTagsResponseContentItem
     */
    suffix?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDatatableTagsResponseContentItem
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDatatableTagsResponseContentItem
     */
    desc?: string;
}
/**
 * 
 * @export
 * @interface GetTagTypesRequest
 */
export interface GetTagTypesRequest {
    /**
     * 
     * @type {string}
     * @memberof GetTagTypesRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTagTypesRequest
     */
    scope?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTagTypesRequest
     */
    cmd?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTagTypesRequest
     */
    tokenId?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTagTypesRequest
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTagTypesRequest
     */
    apiVer?: string;
}
/**
 * 
 * @export
 * @interface GetTagTypesResponse
 */
export interface GetTagTypesResponse {
    /**
     * 
     * @type {string}
     * @memberof GetTagTypesResponse
     */
    id?: string;
    /**
     * 
     * @type {Array<GetTagTypesResponseContent>}
     * @memberof GetTagTypesResponse
     */
    content?: Array<GetTagTypesResponseContent>;
}
/**
 * 
 * @export
 * @interface GetTagTypesResponseContent
 */
export interface GetTagTypesResponseContent {
    /**
     * 
     * @type {WorkflowVariablesId}
     * @memberof GetTagTypesResponseContent
     */
    _id?: WorkflowVariablesId;
    /**
     * 
     * @type {string}
     * @memberof GetTagTypesResponseContent
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTagTypesResponseContent
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTagTypesResponseContent
     */
    desc?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTagTypesResponseContent
     */
    computeOperations?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTagTypesResponseContent
     */
    errorTxt?: string;
}
/**
 * 
 * @export
 * @interface GetTagsRequest
 */
export interface GetTagsRequest {
    /**
     * 
     * @type {string}
     * @memberof GetTagsRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTagsRequest
     */
    campaignId?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTagsRequest
     */
    scope?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTagsRequest
     */
    cmd?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTagsRequest
     */
    tokenId?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTagsRequest
     */
    apiVer?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTagsRequest
     */
    type?: string;
}
/**
 * 
 * @export
 * @interface GetTagsResponse
 */
export interface GetTagsResponse {
    /**
     * 
     * @type {string}
     * @memberof GetTagsResponse
     */
    id?: string;
    /**
     * 
     * @type {Array<GetTagsResponseContent>}
     * @memberof GetTagsResponse
     */
    content?: Array<GetTagsResponseContent>;
}
/**
 * 
 * @export
 * @interface GetTagsResponseContent
 */
export interface GetTagsResponseContent {
    /**
     * 
     * @type {string}
     * @memberof GetTagsResponseContent
     */
    campaignId?: string;
    /**
     * 
     * @type {Array<{ [key: string]: any; }>}
     * @memberof GetTagsResponseContent
     */
    vars?: Array<{ [key: string]: any; }>;
    /**
     * 
     * @type {WorkflowVariablesId}
     * @memberof GetTagsResponseContent
     */
    _id?: WorkflowVariablesId;
}
/**
 * 
 * @export
 * @interface GetVariablesByUeTagRequest
 */
export interface GetVariablesByUeTagRequest {
    /**
     * 
     * @type {string}
     * @memberof GetVariablesByUeTagRequest
     */
    campaignId?: string;
    /**
     * 
     * @type {string}
     * @memberof GetVariablesByUeTagRequest
     */
    cmd?: string;
    /**
     * 
     * @type {string}
     * @memberof GetVariablesByUeTagRequest
     */
    filterCmd?: string;
    /**
     * 
     * @type {string}
     * @memberof GetVariablesByUeTagRequest
     */
    UeTag?: string;
    /**
     * 
     * @type {string}
     * @memberof GetVariablesByUeTagRequest
     */
    tokenId?: string;
    /**
     * 
     * @type {string}
     * @memberof GetVariablesByUeTagRequest
     */
    apiVer?: string;
    /**
     * 
     * @type {number}
     * @memberof GetVariablesByUeTagRequest
     */
    nRecords?: number;
}
/**
 * 
 * @export
 * @interface GetVariablesByUeTagResponse
 */
export interface GetVariablesByUeTagResponse {
    /**
     * 
     * @type {Array<GetVariablesByUeTagResponseResult>}
     * @memberof GetVariablesByUeTagResponse
     */
    result?: Array<GetVariablesByUeTagResponseResult>;
}
/**
 * 
 * @export
 * @interface GetVariablesByUeTagResponseResult
 */
export interface GetVariablesByUeTagResponseResult {
    /**
     * 
     * @type {string}
     * @memberof GetVariablesByUeTagResponseResult
     */
    lastEngagementTime?: string;
    /**
     * 
     * @type {string}
     * @memberof GetVariablesByUeTagResponseResult
     */
    requestId?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof GetVariablesByUeTagResponseResult
     */
    variables?: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof GetVariablesByUeTagResponseResult
     */
    ueTag?: string;
}
/**
 * 
 * @export
 * @interface GetWorkflowLegacyRequest
 */
export interface GetWorkflowLegacyRequest {
    /**
     * 
     * @type {string}
     * @memberof GetWorkflowLegacyRequest
     */
    campaignId?: string;
    /**
     * 
     * @type {string}
     * @memberof GetWorkflowLegacyRequest
     */
    cmd?: string;
    /**
     * 
     * @type {string}
     * @memberof GetWorkflowLegacyRequest
     */
    tokenId?: string;
    /**
     * 
     * @type {string}
     * @memberof GetWorkflowLegacyRequest
     */
    apiVer?: string;
}
/**
 * 
 * @export
 * @interface GetWorkflowVariablesRequest
 */
export interface GetWorkflowVariablesRequest {
    /**
     * 
     * @type {string}
     * @memberof GetWorkflowVariablesRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof GetWorkflowVariablesRequest
     */
    campaignId?: string;
    /**
     * 
     * @type {string}
     * @memberof GetWorkflowVariablesRequest
     */
    scope?: string;
    /**
     * 
     * @type {string}
     * @memberof GetWorkflowVariablesRequest
     */
    cmd?: string;
    /**
     * 
     * @type {string}
     * @memberof GetWorkflowVariablesRequest
     */
    tokenId?: string;
    /**
     * 
     * @type {string}
     * @memberof GetWorkflowVariablesRequest
     */
    apiVer?: string;
    /**
     * 
     * @type {string}
     * @memberof GetWorkflowVariablesRequest
     */
    type?: string;
}
/**
 * 
 * @export
 * @interface IAppProps
 */
export interface IAppProps {
    /**
     * 
     * @type {boolean}
     * @memberof IAppProps
     */
    centerAlign?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IAppProps
     */
    hideResponse?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IAppProps
     */
    toggleResponse?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IAppProps
     */
    optionalResponse?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IAppProps
     */
    typePassword?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IAppProps
     */
    multiSelectOptions?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IAppProps
     */
    locSearchLabel?: string;
    /**
     * 
     * @type {string}
     * @memberof IAppProps
     */
    enableHTML?: string;
}
/**
 * 
 * @export
 * @interface InitUshurRequest
 */
export interface InitUshurRequest {
    /**
     * 
     * @type {string}
     * @memberof InitUshurRequest
     */
    ushurId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InitUshurRequest
     */
    accumulateResponses?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InitUshurRequest
     */
    ignoreState?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InitUshurRequest
     */
    getVars?: boolean;
}
/**
 * 
 * @export
 * @interface InitUshurResponse
 */
export interface InitUshurResponse {
    /**
     * 
     * @type {Array<AccumulatedData>}
     * @memberof InitUshurResponse
     */
    accumulatedData?: Array<AccumulatedData>;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    status?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200
     */
    respCode?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    infoText?: string;
    /**
     * 
     * @type {Workflow}
     * @memberof InlineResponse200
     */
    data?: Workflow;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002
     */
    status?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002
     */
    responseCode?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002
     */
    data?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002
     */
    infoText?: string;
}
/**
 * 
 * @export
 * @interface LegacyFormModuleSection
 */
export interface LegacyFormModuleSection extends LegacyModuleSectionBase {
}
/**
 * 
 * @export
 * @interface LegacyMenuModuleSection
 */
export interface LegacyMenuModuleSection extends LegacyModuleSectionBase {
    /**
     * 
     * @type {Array<LegacyMenuModuleSectionChoices>}
     * @memberof LegacyMenuModuleSection
     */
    choices: Array<LegacyMenuModuleSectionChoices>;
    /**
     * 
     * @type {boolean}
     * @memberof LegacyMenuModuleSection
     */
    isFormEntry?: boolean;
    /**
     * 
     * @type {LegacyWelcomeModuleSectionOnReturn}
     * @memberof LegacyMenuModuleSection
     */
    onReturn?: LegacyWelcomeModuleSectionOnReturn;
    /**
     * 
     * @type {boolean}
     * @memberof LegacyMenuModuleSection
     */
    dropDown?: boolean;
    /**
     * 
     * @type {LegacyMenuModuleSectionErrorLimit}
     * @memberof LegacyMenuModuleSection
     */
    errorLimit?: LegacyMenuModuleSectionErrorLimit;
    /**
     * 
     * @type {LegacyMenuModuleSectionMultiSelectJump}
     * @memberof LegacyMenuModuleSection
     */
    multiSelectJump?: LegacyMenuModuleSectionMultiSelectJump;
    /**
     * 
     * @type {LegacyMenuModuleSectionReminder}
     * @memberof LegacyMenuModuleSection
     */
    reminder?: LegacyMenuModuleSectionReminder;
    /**
     * 
     * @type {LegacyMessageModuleSectionAdditionalDetails}
     * @memberof LegacyMenuModuleSection
     */
    additionalDetails?: LegacyMessageModuleSectionAdditionalDetails;
    /**
     * 
     * @type {LegacyMessageModuleSectionIAppProps}
     * @memberof LegacyMenuModuleSection
     */
    iAppProps?: LegacyMessageModuleSectionIAppProps;
    /**
     * 
     * @type {boolean}
     * @memberof LegacyMenuModuleSection
     */
    horizontalBars?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSection
     */
    helpText?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSection
     */
    question: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSection
     */
    campaignVariable?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSection
     */
    campaignVariableText?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSection
     */
    campaignVariableLoc?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LegacyMenuModuleSection
     */
    hasManualPhrases?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LegacyMenuModuleSection
     */
    ushurLi?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LegacyMenuModuleSection
     */
    dropdown?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LegacyMenuModuleSection
     */
    checkbox?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LegacyMenuModuleSection
     */
    radio?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSection
     */
    mcPrompt?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSection
     */
    invalidPrompt?: string;
    /**
     * 
     * @type {any}
     * @memberof LegacyMenuModuleSection
     */
    UshurDescriptions?: any;
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSection
     */
    note?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSection
     */
    moduleIcon?: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof LegacyMenuModuleSection
     */
    uliTopics?: Array<any>;
    /**
     * 
     * @type {LegacyWelcomeModuleSectionPosition}
     * @memberof LegacyMenuModuleSection
     */
    position?: LegacyWelcomeModuleSectionPosition;
    /**
     * 
     * @type {LegacyWelcomeModuleSectionPosition}
     * @memberof LegacyMenuModuleSection
     */
    previousPosition?: LegacyWelcomeModuleSectionPosition;
}
/**
 * 
 * @export
 * @interface LegacyMenuModuleSectionChoices
 */
export interface LegacyMenuModuleSectionChoices {
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSectionChoices
     */
    choice?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSectionChoices
     */
    UeTag?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LegacyMenuModuleSectionChoices
     */
    isFormEntry?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSectionChoices
     */
    jump?: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof LegacyMenuModuleSectionChoices
     */
    vertices?: Array<any>;
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSectionChoices
     */
    jumpText?: string;
}
/**
 * 
 * @export
 * @interface LegacyMenuModuleSectionErrorLimit
 */
export interface LegacyMenuModuleSectionErrorLimit {
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSectionErrorLimit
     */
    UeTag?: string;
    /**
     * 
     * @type {number}
     * @memberof LegacyMenuModuleSectionErrorLimit
     */
    limit?: number;
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSectionErrorLimit
     */
    jump?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSectionErrorLimit
     */
    jumpText?: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof LegacyMenuModuleSectionErrorLimit
     */
    vertices?: Array<any>;
}
/**
 * 
 * @export
 * @interface LegacyMenuModuleSectionMultiSelectJump
 */
export interface LegacyMenuModuleSectionMultiSelectJump {
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSectionMultiSelectJump
     */
    jump?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSectionMultiSelectJump
     */
    jumpText?: string;
}
/**
 * 
 * @export
 * @interface LegacyMenuModuleSectionReminder
 */
export interface LegacyMenuModuleSectionReminder {
    /**
     * 
     * @type {boolean}
     * @memberof LegacyMenuModuleSectionReminder
     */
    activation?: boolean;
    /**
     * 
     * @type {LegacyMenuModuleSectionReminderDuration}
     * @memberof LegacyMenuModuleSectionReminder
     */
    duration?: LegacyMenuModuleSectionReminderDuration;
    /**
     * 
     * @type {boolean}
     * @memberof LegacyMenuModuleSectionReminder
     */
    notificationCheck?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSectionReminder
     */
    notificationMessage?: string;
    /**
     * 
     * @type {LegacyMenuModuleSectionReminderJump}
     * @memberof LegacyMenuModuleSectionReminder
     */
    jump?: LegacyMenuModuleSectionReminderJump;
    /**
     * 
     * @type {LegacyMenuModuleSectionReminderReminderLimit}
     * @memberof LegacyMenuModuleSectionReminder
     */
    reminderLimit?: LegacyMenuModuleSectionReminderReminderLimit;
}
/**
 * 
 * @export
 * @interface LegacyMenuModuleSectionReminderDuration
 */
export interface LegacyMenuModuleSectionReminderDuration {
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSectionReminderDuration
     */
    days?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSectionReminderDuration
     */
    hours?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSectionReminderDuration
     */
    minutes?: string;
}
/**
 * 
 * @export
 * @interface LegacyMenuModuleSectionReminderJump
 */
export interface LegacyMenuModuleSectionReminderJump {
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSectionReminderJump
     */
    UeTag?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSectionReminderJump
     */
    jump?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSectionReminderJump
     */
    jumpText?: string;
}
/**
 * 
 * @export
 * @interface LegacyMenuModuleSectionReminderReminderLimit
 */
export interface LegacyMenuModuleSectionReminderReminderLimit {
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSectionReminderReminderLimit
     */
    UeTag?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSectionReminderReminderLimit
     */
    limit?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSectionReminderReminderLimit
     */
    jump?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyMenuModuleSectionReminderReminderLimit
     */
    jumpText?: string;
}
/**
 * 
 * @export
 * @interface LegacyMessageModuleSection
 */
export interface LegacyMessageModuleSection extends LegacyModuleSectionBase {
    /**
     * 
     * @type {boolean}
     * @memberof LegacyMessageModuleSection
     */
    isFormEntry?: boolean;
    /**
     * 
     * @type {LegacyWelcomeModuleSectionOnReturn}
     * @memberof LegacyMessageModuleSection
     */
    onReturn?: LegacyWelcomeModuleSectionOnReturn;
    /**
     * 
     * @type {LegacyMessageModuleSectionAdditionalDetails}
     * @memberof LegacyMessageModuleSection
     */
    additionalDetails?: LegacyMessageModuleSectionAdditionalDetails;
    /**
     * 
     * @type {LegacyMessageModuleSectionIAppProps}
     * @memberof LegacyMessageModuleSection
     */
    iAppProps?: LegacyMessageModuleSectionIAppProps;
    /**
     * 
     * @type {any}
     * @memberof LegacyMessageModuleSection
     */
    UshurDescriptions?: any;
    /**
     * 
     * @type {string}
     * @memberof LegacyMessageModuleSection
     */
    note?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyMessageModuleSection
     */
    moduleIcon?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyMessageModuleSection
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyMessageModuleSection
     */
    attachment?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LegacyMessageModuleSection
     */
    hasManualPhrases?: boolean;
    /**
     * 
     * @type {Array<any>}
     * @memberof LegacyMessageModuleSection
     */
    uliTopics?: Array<any>;
    /**
     * 
     * @type {LegacyWelcomeModuleSectionPosition}
     * @memberof LegacyMessageModuleSection
     */
    position?: LegacyWelcomeModuleSectionPosition;
    /**
     * 
     * @type {LegacyWelcomeModuleSectionPosition}
     * @memberof LegacyMessageModuleSection
     */
    previousPosition?: LegacyWelcomeModuleSectionPosition;
    /**
     * 
     * @type {LegacyWelcomeModuleSectionJump}
     * @memberof LegacyMessageModuleSection
     */
    jump: LegacyWelcomeModuleSectionJump;
}
/**
 * 
 * @export
 * @interface LegacyMessageModuleSectionAdditionalDetails
 */
export interface LegacyMessageModuleSectionAdditionalDetails {
    /**
     * 
     * @type {boolean}
     * @memberof LegacyMessageModuleSectionAdditionalDetails
     */
    activated?: boolean;
    /**
     * 
     * @type {Array<LegacyMessageModuleSectionAdditionalDetailsDetails>}
     * @memberof LegacyMessageModuleSectionAdditionalDetails
     */
    details?: Array<LegacyMessageModuleSectionAdditionalDetailsDetails>;
}
/**
 * 
 * @export
 * @interface LegacyMessageModuleSectionAdditionalDetailsDetails
 */
export interface LegacyMessageModuleSectionAdditionalDetailsDetails {
    /**
     * 
     * @type {string}
     * @memberof LegacyMessageModuleSectionAdditionalDetailsDetails
     */
    order?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyMessageModuleSectionAdditionalDetailsDetails
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyMessageModuleSectionAdditionalDetailsDetails
     */
    content?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyMessageModuleSectionAdditionalDetailsDetails
     */
    image?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyMessageModuleSectionAdditionalDetailsDetails
     */
    link?: string;
}
/**
 * 
 * @export
 * @interface LegacyMessageModuleSectionIAppProps
 */
export interface LegacyMessageModuleSectionIAppProps {
    /**
     * 
     * @type {boolean}
     * @memberof LegacyMessageModuleSectionIAppProps
     */
    centerAlign?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LegacyMessageModuleSectionIAppProps
     */
    hideResponse?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LegacyMessageModuleSectionIAppProps
     */
    toggleResponse?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LegacyMessageModuleSectionIAppProps
     */
    optionalResponse?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LegacyMessageModuleSectionIAppProps
     */
    typePassword?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LegacyMessageModuleSectionIAppProps
     */
    multiSelectOptions?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LegacyMessageModuleSectionIAppProps
     */
    locSearchLabel?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyMessageModuleSectionIAppProps
     */
    enableHTML?: string;
}
/**
 * 
 * @export
 * @interface LegacyModuleSectionBase
 */
export interface LegacyModuleSectionBase {
    /**
     * 
     * @type {string}
     * @memberof LegacyModuleSectionBase
     */
    uid: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyModuleSectionBase
     */
    UeTag: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyModuleSectionBase
     */
    sectionType?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyModuleSectionBase
     */
    userTitle: string;
}
/**
 * 
 * @export
 * @interface LegacyRootModule
 */
export interface LegacyRootModule {
    /**
     * 
     * @type {string}
     * @memberof LegacyRootModule
     */
    cmd?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyRootModule
     */
    campaignId?: string;
    /**
     * 
     * @type {LegacyWorkflow}
     * @memberof LegacyRootModule
     */
    campaignData?: LegacyWorkflow;
}
/**
 * 
 * @export
 * @interface LegacySendIAModuleSection
 */
export interface LegacySendIAModuleSection extends LegacyMessageModuleSection {
    /**
     * 
     * @type {string}
     * @memberof LegacySendIAModuleSection
     */
    terminateProcessing: string;
    /**
     * 
     * @type {string}
     * @memberof LegacySendIAModuleSection
     */
    isVisualIndication: string;
}
/**
 * 
 * @export
 * @interface LegacySubModuleCompare
 */
export interface LegacySubModuleCompare extends SubRootModuleBase {
    /**
     * 
     * @type {LegacySubModuleCompareCompare}
     * @memberof LegacySubModuleCompare
     */
    compare?: LegacySubModuleCompareCompare;
}

/**
 * @export
 * @namespace LegacySubModuleCompare
 */
export namespace LegacySubModuleCompare {
}
/**
 * 
 * @export
 * @interface LegacySubModuleCompareCompare
 */
export interface LegacySubModuleCompareCompare {
    /**
     * 
     * @type {string}
     * @memberof LegacySubModuleCompareCompare
     */
    using?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacySubModuleCompareCompare
     */
    against?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacySubModuleCompareCompare
     */
    operator?: string;
}
/**
 * 
 * @export
 * @interface LegacySubModuleCompute
 */
export interface LegacySubModuleCompute extends SubRootModuleBase {
    /**
     * 
     * @type {LegacySubModuleCompareCompare}
     * @memberof LegacySubModuleCompute
     */
    compare?: LegacySubModuleCompareCompare;
}

/**
 * @export
 * @namespace LegacySubModuleCompute
 */
export namespace LegacySubModuleCompute {
}
/**
 * 
 * @export
 * @interface LegacySubModuleCreditCard
 */
export interface LegacySubModuleCreditCard extends SubRootModuleBase {
    /**
     * 
     * @type {LegacySubModuleCompareCompare}
     * @memberof LegacySubModuleCreditCard
     */
    compare?: LegacySubModuleCompareCompare;
}

/**
 * @export
 * @namespace LegacySubModuleCreditCard
 */
export namespace LegacySubModuleCreditCard {
}
/**
 * 
 * @export
 * @interface LegacySubModuleCustomSource
 */
export interface LegacySubModuleCustomSource extends SubRootModuleBase {
    /**
     * 
     * @type {LegacySubModuleCompareCompare}
     * @memberof LegacySubModuleCustomSource
     */
    compare?: LegacySubModuleCompareCompare;
}

/**
 * @export
 * @namespace LegacySubModuleCustomSource
 */
export namespace LegacySubModuleCustomSource {
}
/**
 * 
 * @export
 * @interface LegacySubModuleDataExtractor
 */
export interface LegacySubModuleDataExtractor extends SubRootModuleBase {
    /**
     * 
     * @type {LegacySubModuleCompareCompare}
     * @memberof LegacySubModuleDataExtractor
     */
    compare?: LegacySubModuleCompareCompare;
}

/**
 * @export
 * @namespace LegacySubModuleDataExtractor
 */
export namespace LegacySubModuleDataExtractor {
}
/**
 * 
 * @export
 * @interface LegacySubModuleDelay
 */
export interface LegacySubModuleDelay extends SubRootModuleBase {
    /**
     * 
     * @type {LegacySubModuleCompareCompare}
     * @memberof LegacySubModuleDelay
     */
    compare?: LegacySubModuleCompareCompare;
}

/**
 * @export
 * @namespace LegacySubModuleDelay
 */
export namespace LegacySubModuleDelay {
}
/**
 * 
 * @export
 * @interface LegacySubModuleDocumentProcessor
 */
export interface LegacySubModuleDocumentProcessor extends SubRootModuleBase {
    /**
     * 
     * @type {LegacySubModuleCompareCompare}
     * @memberof LegacySubModuleDocumentProcessor
     */
    compare?: LegacySubModuleCompareCompare;
}

/**
 * @export
 * @namespace LegacySubModuleDocumentProcessor
 */
export namespace LegacySubModuleDocumentProcessor {
}
/**
 * 
 * @export
 * @interface LegacySubModuleEmail
 */
export interface LegacySubModuleEmail extends SubRootModuleBase {
    /**
     * 
     * @type {LegacySubModuleCompareCompare}
     * @memberof LegacySubModuleEmail
     */
    compare?: LegacySubModuleCompareCompare;
}

/**
 * @export
 * @namespace LegacySubModuleEmail
 */
export namespace LegacySubModuleEmail {
}
/**
 * 
 * @export
 * @interface LegacySubModuleFetch
 */
export interface LegacySubModuleFetch extends SubRootModuleBase {
    /**
     * 
     * @type {LegacySubModuleCompareCompare}
     * @memberof LegacySubModuleFetch
     */
    compare?: LegacySubModuleCompareCompare;
}

/**
 * @export
 * @namespace LegacySubModuleFetch
 */
export namespace LegacySubModuleFetch {
}
/**
 * 
 * @export
 * @interface LegacySubModuleFileUpload
 */
export interface LegacySubModuleFileUpload extends SubRootModuleBase {
    /**
     * 
     * @type {LegacySubModuleCompareCompare}
     * @memberof LegacySubModuleFileUpload
     */
    compare?: LegacySubModuleCompareCompare;
}

/**
 * @export
 * @namespace LegacySubModuleFileUpload
 */
export namespace LegacySubModuleFileUpload {
}
/**
 * 
 * @export
 * @interface LegacySubModuleFormInput
 */
export interface LegacySubModuleFormInput extends SubRootModuleBase {
}

/**
 * @export
 * @namespace LegacySubModuleFormInput
 */
export namespace LegacySubModuleFormInput {
}
/**
 * 
 * @export
 * @interface LegacySubModuleIncomingEmailProcessing
 */
export interface LegacySubModuleIncomingEmailProcessing extends SubRootModuleBase {
    /**
     * 
     * @type {LegacySubModuleCompareCompare}
     * @memberof LegacySubModuleIncomingEmailProcessing
     */
    compare?: LegacySubModuleCompareCompare;
}

/**
 * @export
 * @namespace LegacySubModuleIncomingEmailProcessing
 */
export namespace LegacySubModuleIncomingEmailProcessing {
}
/**
 * 
 * @export
 * @interface LegacySubModuleLI
 */
export interface LegacySubModuleLI extends SubRootModuleBase {
    /**
     * 
     * @type {LegacySubModuleCompareCompare}
     * @memberof LegacySubModuleLI
     */
    compare?: LegacySubModuleCompareCompare;
}

/**
 * @export
 * @namespace LegacySubModuleLI
 */
export namespace LegacySubModuleLI {
}
/**
 * 
 * @export
 * @interface LegacySubModuleLocation
 */
export interface LegacySubModuleLocation extends SubRootModuleBase {
    /**
     * 
     * @type {LegacySubModuleCompareCompare}
     * @memberof LegacySubModuleLocation
     */
    compare?: LegacySubModuleCompareCompare;
}

/**
 * @export
 * @namespace LegacySubModuleLocation
 */
export namespace LegacySubModuleLocation {
}
/**
 * 
 * @export
 * @interface LegacySubModuleMessage
 */
export interface LegacySubModuleMessage extends SubRootModuleBase {
    /**
     * 
     * @type {LegacySubModuleCompareCompare}
     * @memberof LegacySubModuleMessage
     */
    compare?: LegacySubModuleCompareCompare;
}

/**
 * @export
 * @namespace LegacySubModuleMessage
 */
export namespace LegacySubModuleMessage {
}
/**
 * 
 * @export
 * @interface LegacySubModuleMultipleChoice
 */
export interface LegacySubModuleMultipleChoice extends SubRootModuleBase {
    /**
     * 
     * @type {LegacySubModuleCompareCompare}
     * @memberof LegacySubModuleMultipleChoice
     */
    compare?: LegacySubModuleCompareCompare;
}

/**
 * @export
 * @namespace LegacySubModuleMultipleChoice
 */
export namespace LegacySubModuleMultipleChoice {
}
/**
 * 
 * @export
 * @interface LegacySubModuleOCR
 */
export interface LegacySubModuleOCR extends SubRootModuleBase {
    /**
     * 
     * @type {LegacySubModuleCompareCompare}
     * @memberof LegacySubModuleOCR
     */
    compare?: LegacySubModuleCompareCompare;
}

/**
 * @export
 * @namespace LegacySubModuleOCR
 */
export namespace LegacySubModuleOCR {
}
/**
 * 
 * @export
 * @interface LegacySubModuleOpenResponse
 */
export interface LegacySubModuleOpenResponse extends SubRootModuleBase {
    /**
     * 
     * @type {LegacySubModuleCompareCompare}
     * @memberof LegacySubModuleOpenResponse
     */
    compare?: LegacySubModuleCompareCompare;
}

/**
 * @export
 * @namespace LegacySubModuleOpenResponse
 */
export namespace LegacySubModuleOpenResponse {
}
/**
 * 
 * @export
 * @interface LegacySubModuleOperator
 */
export interface LegacySubModuleOperator extends SubRootModuleBase {
    /**
     * 
     * @type {LegacySubModuleCompareCompare}
     * @memberof LegacySubModuleOperator
     */
    compare?: LegacySubModuleCompareCompare;
}

/**
 * @export
 * @namespace LegacySubModuleOperator
 */
export namespace LegacySubModuleOperator {
}
/**
 * 
 * @export
 * @interface LegacySubModulePhoneCall
 */
export interface LegacySubModulePhoneCall extends SubRootModuleBase {
    /**
     * 
     * @type {LegacySubModuleCompareCompare}
     * @memberof LegacySubModulePhoneCall
     */
    compare?: LegacySubModuleCompareCompare;
}

/**
 * @export
 * @namespace LegacySubModulePhoneCall
 */
export namespace LegacySubModulePhoneCall {
}
/**
 * 
 * @export
 * @interface LegacySubModuleSendIA
 */
export interface LegacySubModuleSendIA extends SubRootModuleBase {
    /**
     * 
     * @type {string}
     * @memberof LegacySubModuleSendIA
     */
    isVisualIndication?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacySubModuleSendIA
     */
    terminateProcessing?: string;
}

/**
 * @export
 * @namespace LegacySubModuleSendIA
 */
export namespace LegacySubModuleSendIA {
}
/**
 * 
 * @export
 * @interface LegacySubModuleStartInboundWebhook
 */
export interface LegacySubModuleStartInboundWebhook extends SubRootModuleBase {
    /**
     * 
     * @type {LegacySubModuleCompareCompare}
     * @memberof LegacySubModuleStartInboundWebhook
     */
    compare?: LegacySubModuleCompareCompare;
}

/**
 * @export
 * @namespace LegacySubModuleStartInboundWebhook
 */
export namespace LegacySubModuleStartInboundWebhook {
}
/**
 * 
 * @export
 * @interface LegacySubModuleStartIntegrations
 */
export interface LegacySubModuleStartIntegrations extends SubRootModuleBase {
    /**
     * 
     * @type {LegacySubModuleCompareCompare}
     * @memberof LegacySubModuleStartIntegrations
     */
    compare?: LegacySubModuleCompareCompare;
}

/**
 * @export
 * @namespace LegacySubModuleStartIntegrations
 */
export namespace LegacySubModuleStartIntegrations {
}
/**
 * 
 * @export
 * @interface LegacySubModuleStartInvisibleApp
 */
export interface LegacySubModuleStartInvisibleApp extends SubRootModuleBase {
    /**
     * 
     * @type {LegacySubModuleCompareCompare}
     * @memberof LegacySubModuleStartInvisibleApp
     */
    compare?: LegacySubModuleCompareCompare;
}

/**
 * @export
 * @namespace LegacySubModuleStartInvisibleApp
 */
export namespace LegacySubModuleStartInvisibleApp {
}
/**
 * 
 * @export
 * @interface LegacySubModuleStartOutboundWebhook
 */
export interface LegacySubModuleStartOutboundWebhook extends SubRootModuleBase {
    /**
     * 
     * @type {LegacySubModuleCompareCompare}
     * @memberof LegacySubModuleStartOutboundWebhook
     */
    compare?: LegacySubModuleCompareCompare;
}

/**
 * @export
 * @namespace LegacySubModuleStartOutboundWebhook
 */
export namespace LegacySubModuleStartOutboundWebhook {
}
/**
 * 
 * @export
 * @interface LegacySubModuleStore
 */
export interface LegacySubModuleStore extends SubRootModuleBase {
    /**
     * 
     * @type {LegacySubModuleCompareCompare}
     * @memberof LegacySubModuleStore
     */
    compare?: LegacySubModuleCompareCompare;
}

/**
 * @export
 * @namespace LegacySubModuleStore
 */
export namespace LegacySubModuleStore {
}
/**
 * 
 * @export
 * @interface LegacySubModuleTexting
 */
export interface LegacySubModuleTexting extends SubRootModuleBase {
    /**
     * 
     * @type {LegacySubModuleCompareCompare}
     * @memberof LegacySubModuleTexting
     */
    compare?: LegacySubModuleCompareCompare;
}

/**
 * @export
 * @namespace LegacySubModuleTexting
 */
export namespace LegacySubModuleTexting {
}
/**
 * 
 * @export
 * @interface LegacySubRoot
 */
export interface LegacySubRoot {
}
/**
 * 
 * @export
 * @interface LegacySubRootBase
 */
export interface LegacySubRootBase {
    /**
     * 
     * @type {string}
     * @memberof LegacySubRootBase
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof LegacySubRootBase
     */
    module: string;
}
/**
 * 
 * @export
 * @interface LegacySubRootMenu
 */
export interface LegacySubRootMenu extends LegacySubRootBase {
    /**
     * 
     * @type {string}
     * @memberof LegacySubRootMenu
     */
    question?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacySubRootMenu
     */
    UeTag?: string;
    /**
     * 
     * @type {any}
     * @memberof LegacySubRootMenu
     */
    helpInfo?: any;
    /**
     * 
     * @type {boolean}
     * @memberof LegacySubRootMenu
     */
    isMenu?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LegacySubRootMenu
     */
    prompt?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacySubRootMenu
     */
    version?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacySubRootMenu
     */
    passString?: string;
    /**
     * 
     * @type {{ [key: string]: LegacySubRootMenuOptionValue | LegacySubRootMenuOptionDefault; }}
     * @memberof LegacySubRootMenu
     */
    options?: { [key: string]: LegacySubRootMenuOptionValue | LegacySubRootMenuOptionDefault; };
    /**
     * 
     * @type {LegacySubRootMenuRoutines}
     * @memberof LegacySubRootMenu
     */
    routines?: LegacySubRootMenuRoutines;
}
/**
 * 
 * @export
 * @interface LegacySubRootMenuOptionDefault
 */
export interface LegacySubRootMenuOptionDefault {
    /**
     * 
     * @type {LegacySubRootMenuOptionDefaultDefault}
     * @memberof LegacySubRootMenuOptionDefault
     */
    _default?: LegacySubRootMenuOptionDefaultDefault;
}
/**
 * 
 * @export
 * @interface LegacySubRootMenuOptionDefaultDefault
 */
export interface LegacySubRootMenuOptionDefaultDefault {
    /**
     * 
     * @type {LegacySubRootMenuOptionDefaultDefaultNext}
     * @memberof LegacySubRootMenuOptionDefaultDefault
     */
    next: LegacySubRootMenuOptionDefaultDefaultNext;
}
/**
 * 
 * @export
 * @interface LegacySubRootMenuOptionDefaultDefaultNext
 */
export interface LegacySubRootMenuOptionDefaultDefaultNext {
    /**
     * 
     * @type {string}
     * @memberof LegacySubRootMenuOptionDefaultDefaultNext
     */
    routine: string;
}
/**
 * 
 * @export
 * @interface LegacySubRootMenuOptionValue
 */
export interface LegacySubRootMenuOptionValue {
    /**
     * 
     * @type {LegacySubRootMenuOptionDefaultDefaultNext}
     * @memberof LegacySubRootMenuOptionValue
     */
    next: LegacySubRootMenuOptionDefaultDefaultNext;
    /**
     * 
     * @type {string}
     * @memberof LegacySubRootMenuOptionValue
     */
    UeTag: string;
    /**
     * 
     * @type {string}
     * @memberof LegacySubRootMenuOptionValue
     */
    compText: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof LegacySubRootMenuOptionValue
     */
    expressions: Array<string>;
}
/**
 * 
 * @export
 * @interface LegacySubRootMenuRoutines
 */
export interface LegacySubRootMenuRoutines {
}
/**
 * 
 * @export
 * @interface LegacySubRootMessage
 */
export interface LegacySubRootMessage extends LegacySubRootBase {
    /**
     * 
     * @type {boolean}
     * @memberof LegacySubRootMessage
     */
    skipMenu: boolean;
    /**
     * 
     * @type {string}
     * @memberof LegacySubRootMessage
     */
    UeTag: string;
    /**
     * 
     * @type {LegacySubRootMessageRoutines}
     * @memberof LegacySubRootMessage
     */
    routines: LegacySubRootMessageRoutines;
    /**
     * 
     * @type {string}
     * @memberof LegacySubRootMessage
     */
    isMenu: string;
    /**
     * 
     * @type {string}
     * @memberof LegacySubRootMessage
     */
    prompt: string;
    /**
     * 
     * @type {string}
     * @memberof LegacySubRootMessage
     */
    version: string;
    /**
     * 
     * @type {any}
     * @memberof LegacySubRootMessage
     */
    option: any;
    /**
     * 
     * @type {string}
     * @memberof LegacySubRootMessage
     */
    passString: string;
}
/**
 * 
 * @export
 * @interface LegacySubRootMessageRoutines
 */
export interface LegacySubRootMessageRoutines {
    /**
     * 
     * @type {LegacySubRootMessageRoutinesUshurInitialRoutine}
     * @memberof LegacySubRootMessageRoutines
     */
    Ushur_Initial_Routine: LegacySubRootMessageRoutinesUshurInitialRoutine;
    /**
     * 
     * @type {LegacySubRootMessageRoutinesGoToNextSection}
     * @memberof LegacySubRootMessageRoutines
     */
    goToNextSection: LegacySubRootMessageRoutinesGoToNextSection;
}
/**
 * 
 * @export
 * @interface LegacySubRootMessageRoutinesGoToNextSection
 */
export interface LegacySubRootMessageRoutinesGoToNextSection {
    /**
     * 
     * @type {string}
     * @memberof LegacySubRootMessageRoutinesGoToNextSection
     */
    action: string;
    /**
     * 
     * @type {LegacySubRootMessageRoutinesGoToNextSectionParams}
     * @memberof LegacySubRootMessageRoutinesGoToNextSection
     */
    params: LegacySubRootMessageRoutinesGoToNextSectionParams;
}
/**
 * 
 * @export
 * @interface LegacySubRootMessageRoutinesGoToNextSectionParams
 */
export interface LegacySubRootMessageRoutinesGoToNextSectionParams {
    /**
     * 
     * @type {string}
     * @memberof LegacySubRootMessageRoutinesGoToNextSectionParams
     */
    menuId: string;
    /**
     * 
     * @type {boolean}
     * @memberof LegacySubRootMessageRoutinesGoToNextSectionParams
     */
    stayInCampaign: boolean;
}
/**
 * 
 * @export
 * @interface LegacySubRootMessageRoutinesUshurInitialRoutine
 */
export interface LegacySubRootMessageRoutinesUshurInitialRoutine {
    /**
     * 
     * @type {LegacySubRootMessageRoutinesUshurInitialRoutineNext}
     * @memberof LegacySubRootMessageRoutinesUshurInitialRoutine
     */
    next: LegacySubRootMessageRoutinesUshurInitialRoutineNext;
    /**
     * 
     * @type {string}
     * @memberof LegacySubRootMessageRoutinesUshurInitialRoutine
     */
    action: string;
    /**
     * 
     * @type {LegacySubRootMessageRoutinesUshurInitialRoutineParams}
     * @memberof LegacySubRootMessageRoutinesUshurInitialRoutine
     */
    params: LegacySubRootMessageRoutinesUshurInitialRoutineParams;
}
/**
 * 
 * @export
 * @interface LegacySubRootMessageRoutinesUshurInitialRoutineNext
 */
export interface LegacySubRootMessageRoutinesUshurInitialRoutineNext {
    /**
     * 
     * @type {string}
     * @memberof LegacySubRootMessageRoutinesUshurInitialRoutineNext
     */
    routine?: string;
}
/**
 * 
 * @export
 * @interface LegacySubRootMessageRoutinesUshurInitialRoutineParams
 */
export interface LegacySubRootMessageRoutinesUshurInitialRoutineParams {
    /**
     * 
     * @type {string}
     * @memberof LegacySubRootMessageRoutinesUshurInitialRoutineParams
     */
    text: string;
}
/**
 * 
 * @export
 * @interface LegacySubRootModule
 */
export interface LegacySubRootModule {
}
/**
 * 
 * @export
 * @interface LegacyWelcomeModuleSection
 */
export interface LegacyWelcomeModuleSection extends LegacyModuleSectionBase {
    /**
     * 
     * @type {string}
     * @memberof LegacyWelcomeModuleSection
     */
    currentStep?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyWelcomeModuleSection
     */
    note?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyWelcomeModuleSection
     */
    moduleIcon?: string;
    /**
     * 
     * @type {LegacyWelcomeModuleSectionPosition}
     * @memberof LegacyWelcomeModuleSection
     */
    position?: LegacyWelcomeModuleSectionPosition;
    /**
     * 
     * @type {LegacyWelcomeModuleSectionPosition}
     * @memberof LegacyWelcomeModuleSection
     */
    previousPosition?: LegacyWelcomeModuleSectionPosition;
    /**
     * 
     * @type {LegacyWelcomeModuleSectionOnReturn}
     * @memberof LegacyWelcomeModuleSection
     */
    onReturn: LegacyWelcomeModuleSectionOnReturn;
    /**
     * 
     * @type {string}
     * @memberof LegacyWelcomeModuleSection
     */
    message: string;
    /**
     * 
     * @type {boolean}
     * @memberof LegacyWelcomeModuleSection
     */
    isFormEntry?: boolean;
    /**
     * 
     * @type {LegacyWelcomeModuleSectionJump}
     * @memberof LegacyWelcomeModuleSection
     */
    jump: LegacyWelcomeModuleSectionJump;
}
/**
 * 
 * @export
 * @interface LegacyWelcomeModuleSectionJump
 */
export interface LegacyWelcomeModuleSectionJump {
    /**
     * 
     * @type {string}
     * @memberof LegacyWelcomeModuleSectionJump
     */
    jump: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyWelcomeModuleSectionJump
     */
    jumpText: string;
}
/**
 * 
 * @export
 * @interface LegacyWelcomeModuleSectionOnReturn
 */
export interface LegacyWelcomeModuleSectionOnReturn {
    /**
     * 
     * @type {string}
     * @memberof LegacyWelcomeModuleSectionOnReturn
     */
    UeTag: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyWelcomeModuleSectionOnReturn
     */
    jumpText: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyWelcomeModuleSectionOnReturn
     */
    jump: string;
}
/**
 * 
 * @export
 * @interface LegacyWelcomeModuleSectionPosition
 */
export interface LegacyWelcomeModuleSectionPosition {
    /**
     * 
     * @type {number}
     * @memberof LegacyWelcomeModuleSectionPosition
     */
    x?: number;
    /**
     * 
     * @type {number}
     * @memberof LegacyWelcomeModuleSectionPosition
     */
    y?: number;
}
/**
 * 
 * @export
 * @interface LegacyWorkflow
 */
export interface LegacyWorkflow {
    /**
     * 
     * @type {boolean}
     * @memberof LegacyWorkflow
     */
    visuallyUshur?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LegacyWorkflow
     */
    virtualPhoneNumber: string;
    /**
     * 
     * @type {boolean}
     * @memberof LegacyWorkflow
     */
    newCampaign?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LegacyWorkflow
     */
    callbackNumber: string;
    /**
     * 
     * @type {boolean}
     * @memberof LegacyWorkflow
     */
    skipMenu?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LegacyWorkflow
     */
    author: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyWorkflow
     */
    AppContext: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyWorkflow
     */
    helpTrigger?: string;
    /**
     * 
     * @type {any}
     * @memberof LegacyWorkflow
     */
    Languages?: any;
    /**
     * 
     * @type {string}
     * @memberof LegacyWorkflow
     */
    lastEdited: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyWorkflow
     */
    version?: string;
    /**
     * 
     * @type {any}
     * @memberof LegacyWorkflow
     */
    visualData?: any;
    /**
     * 
     * @type {string}
     * @memberof LegacyWorkflow
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyWorkflow
     */
    id: string;
    /**
     * 
     * @type {LegacyWorkflowUi}
     * @memberof LegacyWorkflow
     */
    ui: LegacyWorkflowUi;
    /**
     * 
     * @type {string}
     * @memberof LegacyWorkflow
     */
    status?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LegacyWorkflow
     */
    isEmptyUshur?: boolean;
    /**
     * 
     * @type {any}
     * @memberof LegacyWorkflow
     */
    options?: any;
    /**
     * 
     * @type {LegacyWorkflowExpiry}
     * @memberof LegacyWorkflow
     */
    expiry?: LegacyWorkflowExpiry;
    /**
     * 
     * @type {RootRoutine}
     * @memberof LegacyWorkflow
     */
    routines: RootRoutine;
    /**
     * 
     * @type {string}
     * @memberof LegacyWorkflow
     */
    lang: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyWorkflow
     */
    prompt?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyWorkflow
     */
    userResponse?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyWorkflow
     */
    landlineFlag?: string;
}
/**
 * 
 * @export
 * @interface LegacyWorkflowExpiry
 */
export interface LegacyWorkflowExpiry {
    /**
     * 
     * @type {number}
     * @memberof LegacyWorkflowExpiry
     */
    hours?: number;
    /**
     * 
     * @type {number}
     * @memberof LegacyWorkflowExpiry
     */
    minutes?: number;
    /**
     * 
     * @type {number}
     * @memberof LegacyWorkflowExpiry
     */
    days?: number;
    /**
     * 
     * @type {string}
     * @memberof LegacyWorkflowExpiry
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface LegacyWorkflowUi
 */
export interface LegacyWorkflowUi {
    /**
     * 
     * @type {string}
     * @memberof LegacyWorkflowUi
     */
    campaignId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LegacyWorkflowUi
     */
    active?: boolean;
    /**
     * 
     * @type {LegacyWorkflowUiUeTagStructure}
     * @memberof LegacyWorkflowUi
     */
    UeTagStructure?: LegacyWorkflowUiUeTagStructure;
    /**
     * 
     * @type {string}
     * @memberof LegacyWorkflowUi
     */
    version?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyWorkflowUi
     */
    welcome?: string;
    /**
     * 
     * @type {Array<LegacyWelcomeModuleSection | LegacySendIAModuleSection | LegacyMessageModuleSection | LegacyMenuModuleSection | LegacyFormModuleSection>}
     * @memberof LegacyWorkflowUi
     */
    sections: Array<LegacyWelcomeModuleSection | LegacySendIAModuleSection | LegacyMessageModuleSection | LegacyMenuModuleSection | LegacyFormModuleSection>;
    /**
     * Used only if the legacy workflow is used to store Canvas 2.0 content.
     * @type {Array<WorkflowStep | WorkflowLink>}
     * @memberof LegacyWorkflowUi
     */
    cells: Array<WorkflowStep | WorkflowLink>;
}
/**
 * 
 * @export
 * @interface LegacyWorkflowUiUeTagStructure
 */
export interface LegacyWorkflowUiUeTagStructure {
    /**
     * 
     * @type {Array<LegacyWorkflowUiUeTagStructureResult>}
     * @memberof LegacyWorkflowUiUeTagStructure
     */
    result?: Array<LegacyWorkflowUiUeTagStructureResult>;
    /**
     * 
     * @type {string}
     * @memberof LegacyWorkflowUiUeTagStructure
     */
    ushurId?: string;
    /**
     * 
     * @type {number}
     * @memberof LegacyWorkflowUiUeTagStructure
     */
    tagCount?: number;
}
/**
 * 
 * @export
 * @interface LegacyWorkflowUiUeTagStructureResult
 */
export interface LegacyWorkflowUiUeTagStructureResult {
    /**
     * 
     * @type {string}
     * @memberof LegacyWorkflowUiUeTagStructureResult
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyWorkflowUiUeTagStructureResult
     */
    UeTag?: string;
}
/**
 * 
 * @export
 * @interface LegacyWorkflowUpdateResponse
 */
export interface LegacyWorkflowUpdateResponse {
    /**
     * 
     * @type {string}
     * @memberof LegacyWorkflowUpdateResponse
     */
    status?: string;
    /**
     * 
     * @type {number}
     * @memberof LegacyWorkflowUpdateResponse
     */
    respCode?: number;
    /**
     * 
     * @type {string}
     * @memberof LegacyWorkflowUpdateResponse
     */
    respText?: string;
}
/**
 * 
 * @export
 * @interface MenuModule
 */
export interface MenuModule extends ModuleBase {
    /**
     * 
     * @type {string}
     * @memberof MenuModule
     */
    text: string;
    /**
     * 
     * @type {Array<MenuOption>}
     * @memberof MenuModule
     */
    menuOptions: Array<MenuOption>;
    /**
     * 
     * @type {string}
     * @memberof MenuModule
     */
    menuUserSelection: string;
    /**
     * 
     * @type {string}
     * @memberof MenuModule
     */
    errorLimitValue: string;
    /**
     * 
     * @type {string}
     * @memberof MenuModule
     */
    errorBranchTo: string;
}
/**
 * 
 * @export
 * @interface MenuOption
 */
export interface MenuOption {
    /**
     * 
     * @type {string}
     * @memberof MenuOption
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof MenuOption
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof MenuOption
     */
    branchToStepId: string;
}
/**
 * 
 * @export
 * @interface MessageModule
 */
export interface MessageModule extends ModuleBase {
    /**
     * 
     * @type {string}
     * @memberof MessageModule
     */
    text: string;
}
/**
 * 
 * @export
 * @interface ModuleBase
 */
export interface ModuleBase {
    /**
     * 
     * @type {string}
     * @memberof ModuleBase
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ModuleBase
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof ModuleBase
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof ModuleBase
     */
    uetag?: string;
}
/**
 * 
 * @export
 * @interface PassString
 */
export interface PassString {
    /**
     * 
     * @type {string}
     * @memberof PassString
     */
    module?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PassString
     */
    userResponseParagraph?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PassString
     */
    userResponseSingleLine?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PassString
     */
    fieldValue?: string;
    /**
     * 
     * @type {string}
     * @memberof PassString
     */
    validation?: string;
    /**
     * 
     * @type {string}
     * @memberof PassString
     */
    validationErrorTxt?: string;
    /**
     * 
     * @type {string}
     * @memberof PassString
     */
    autoComplete?: string;
    /**
     * 
     * @type {string}
     * @memberof PassString
     */
    helpInfo?: string;
    /**
     * 
     * @type {IAppProps}
     * @memberof PassString
     */
    iAppProps?: IAppProps;
}
/**
 * 
 * @export
 * @interface RootRoutine
 */
export interface RootRoutine {
    /**
     * 
     * @type {RootRoutineUshurInitialRoutine}
     * @memberof RootRoutine
     */
    Ushur_Initial_Routine: RootRoutineUshurInitialRoutine;
    /**
     * 
     * @type {RootRoutineOnReturn}
     * @memberof RootRoutine
     */
    On_Return?: RootRoutineOnReturn;
}
/**
 * 
 * @export
 * @interface RootRoutineOnReturn
 */
export interface RootRoutineOnReturn {
    /**
     * 
     * @type {string}
     * @memberof RootRoutineOnReturn
     */
    UeTag: string;
    /**
     * 
     * @type {string}
     * @memberof RootRoutineOnReturn
     */
    action: string;
    /**
     * 
     * @type {LegacySubRootMessageRoutinesGoToNextSectionParams}
     * @memberof RootRoutineOnReturn
     */
    params: LegacySubRootMessageRoutinesGoToNextSectionParams;
}
/**
 * 
 * @export
 * @interface RootRoutineUshurInitialRoutine
 */
export interface RootRoutineUshurInitialRoutine {
    /**
     * 
     * @type {string}
     * @memberof RootRoutineUshurInitialRoutine
     */
    action: string;
    /**
     * 
     * @type {LegacySubRootMessageRoutinesGoToNextSectionParams}
     * @memberof RootRoutineUshurInitialRoutine
     */
    params: LegacySubRootMessageRoutinesGoToNextSectionParams;
}
/**
 * 
 * @export
 * @interface SubRootModuleActionBase
 */
export interface SubRootModuleActionBase {
    /**
     * 
     * @type {string}
     * @memberof SubRootModuleActionBase
     */
    action?: string;
    /**
     * 
     * @type {SubRootModuleActionBaseNext}
     * @memberof SubRootModuleActionBase
     */
    next?: SubRootModuleActionBaseNext;
    /**
     * 
     * @type {SubRootModuleActionBaseParams}
     * @memberof SubRootModuleActionBase
     */
    params?: SubRootModuleActionBaseParams;
}
/**
 * 
 * @export
 * @interface SubRootModuleActionBaseNext
 */
export interface SubRootModuleActionBaseNext {
    /**
     * 
     * @type {string}
     * @memberof SubRootModuleActionBaseNext
     */
    routine?: string;
}
/**
 * 
 * @export
 * @interface SubRootModuleActionBaseParams
 */
export interface SubRootModuleActionBaseParams {
    /**
     * 
     * @type {string}
     * @memberof SubRootModuleActionBaseParams
     */
    menuId?: string;
    /**
     * 
     * @type {string}
     * @memberof SubRootModuleActionBaseParams
     */
    stayInCampaign?: string;
    /**
     * 
     * @type {Array<SubRootModuleActionBaseParamsData>}
     * @memberof SubRootModuleActionBaseParams
     */
    data?: Array<SubRootModuleActionBaseParamsData>;
}
/**
 * 
 * @export
 * @interface SubRootModuleActionBaseParamsData
 */
export interface SubRootModuleActionBaseParamsData {
    /**
     * 
     * @type {number}
     * @memberof SubRootModuleActionBaseParamsData
     */
    index?: number;
    /**
     * 
     * @type {string}
     * @memberof SubRootModuleActionBaseParamsData
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof SubRootModuleActionBaseParamsData
     */
    text?: string;
    /**
     * 
     * @type {string}
     * @memberof SubRootModuleActionBaseParamsData
     */
    storeVariable?: string;
    /**
     * 
     * @type {string}
     * @memberof SubRootModuleActionBaseParamsData
     */
    validationType?: string;
    /**
     * 
     * @type {PassString}
     * @memberof SubRootModuleActionBaseParamsData
     */
    passString?: PassString;
    /**
     * 
     * @type {SubRootModuleActionBaseParamsDisplayCondition}
     * @memberof SubRootModuleActionBaseParamsData
     */
    displayCondition?: SubRootModuleActionBaseParamsDisplayCondition;
}
/**
 * 
 * @export
 * @interface SubRootModuleActionBaseParamsDisplayCondition
 */
export interface SubRootModuleActionBaseParamsDisplayCondition {
    /**
     * 
     * @type {string}
     * @memberof SubRootModuleActionBaseParamsDisplayCondition
     */
    variable?: string;
    /**
     * 
     * @type {string}
     * @memberof SubRootModuleActionBaseParamsDisplayCondition
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface SubRootModuleBase
 */
export interface SubRootModuleBase {
    /**
     * 
     * @type {string}
     * @memberof SubRootModuleBase
     */
    cmd?: SubRootModuleBase.CmdEnum;
    /**
     * 
     * @type {string}
     * @memberof SubRootModuleBase
     */
    campaignId?: string;
    /**
     * 
     * @type {SubRootModuleDataBase}
     * @memberof SubRootModuleBase
     */
    campaignData?: SubRootModuleDataBase;
    /**
     * 
     * @type {boolean}
     * @memberof SubRootModuleBase
     */
    ushurLi?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SubRootModuleBase
     */
    train?: boolean;
}

/**
 * @export
 * @namespace SubRootModuleBase
 */
export namespace SubRootModuleBase {
    /**
     * @export
     * @enum {string}
     */
    export enum CmdEnum {
        AddModule = <any> 'addModule',
        UpdateModule = <any> 'updateModule'
    }
}
/**
 * 
 * @export
 * @interface SubRootModuleDataBase
 */
export interface SubRootModuleDataBase {
    /**
     * 
     * @type {string}
     * @memberof SubRootModuleDataBase
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof SubRootModuleDataBase
     */
    UeTag?: string;
    /**
     * 
     * @type {string}
     * @memberof SubRootModuleDataBase
     */
    module?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SubRootModuleDataBase
     */
    skipMenu?: boolean;
    /**
     * 
     * @type {SubRootModuleDataBaseRoutines}
     * @memberof SubRootModuleDataBase
     */
    routines?: SubRootModuleDataBaseRoutines;
    /**
     * 
     * @type {string}
     * @memberof SubRootModuleDataBase
     */
    _private?: string;
    /**
     * 
     * @type {PassString}
     * @memberof SubRootModuleDataBase
     */
    passString?: PassString;
    /**
     * 
     * @type {string}
     * @memberof SubRootModuleDataBase
     */
    version?: string;
}
/**
 * 
 * @export
 * @interface SubRootModuleDataBaseRoutines
 */
export interface SubRootModuleDataBaseRoutines {
    /**
     * 
     * @type {SubRootModuleActionBase}
     * @memberof SubRootModuleDataBaseRoutines
     */
    Ushur_Initial_Routine?: SubRootModuleActionBase;
    /**
     * 
     * @type {SubRootModuleActionBase}
     * @memberof SubRootModuleDataBaseRoutines
     */
    storeVariable?: SubRootModuleActionBase;
    /**
     * 
     * @type {SubRootModuleActionBase}
     * @memberof SubRootModuleDataBaseRoutines
     */
    performValidation?: SubRootModuleActionBase;
    /**
     * 
     * @type {SubRootModuleActionBase}
     * @memberof SubRootModuleDataBaseRoutines
     */
    goToNextSection?: SubRootModuleActionBase;
}
/**
 * 
 * @export
 */
export type Text = string
/**
 * 
 * @export
 * @interface UpdateWorkflowLegacyRequest
 */
export interface UpdateWorkflowLegacyRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateWorkflowLegacyRequest
     */
    campaignName: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateWorkflowLegacyRequest
     */
    cmd: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateWorkflowLegacyRequest
     */
    tokenId?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateWorkflowLegacyRequest
     */
    actionContext: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateWorkflowLegacyRequest
     */
    apiVer: string;
    /**
     * 
     * @type {Array<LegacyRootModule | LegacySubRootModule>}
     * @memberof UpdateWorkflowLegacyRequest
     */
    modules: Array<LegacyRootModule | LegacySubRootModule>;
}
/**
 * 
 * @export
 * @interface Workflow
 */
export interface Workflow {
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    AppContext: string;
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    name: string;
    /**
     * legacy field
     * @type {boolean}
     * @memberof Workflow
     */
    newCampaign?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    author: string;
    /**
     * 
     * @type {any}
     * @memberof Workflow
     */
    languages: any;
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    virtualPhoneNumber: string;
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    callbackNumber: string;
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    lastEdited: string;
    /**
     * 
     * @type {any}
     * @memberof Workflow
     */
    UshurDescriptions: any;
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    lang: string;
    /**
     * 
     * @type {boolean}
     * @memberof Workflow
     */
    isEmptyUshur?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Workflow
     */
    active?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    version?: string;
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    prompt?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Workflow
     */
    skipMenu?: boolean;
    /**
     * 
     * @type {any}
     * @memberof Workflow
     */
    visuallyUshur?: any;
    /**
     * 
     * @type {RootRoutine}
     * @memberof Workflow
     */
    routines: RootRoutine;
    /**
     * 
     * @type {WorkflowUi}
     * @memberof Workflow
     */
    ui: WorkflowUi;
    /**
     * 
     * @type {WorkflowIa}
     * @memberof Workflow
     */
    ia: WorkflowIa;
}
/**
 * 
 * @export
 * @interface WorkflowActivationRequest
 */
export interface WorkflowActivationRequest {
    /**
     * 
     * @type {string}
     * @memberof WorkflowActivationRequest
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowActivationRequest
     */
    campaignId?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof WorkflowActivationRequest
     */
    virtualNo?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof WorkflowActivationRequest
     */
    active?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowActivationRequest
     */
    actionContext?: string;
}
/**
 * 
 * @export
 * @interface WorkflowAttributes
 */
export interface WorkflowAttributes {
    /**
     * 
     * @type {string}
     * @memberof WorkflowAttributes
     */
    id?: string;
    /**
     * 
     * @type {WorkflowAttributesLabel}
     * @memberof WorkflowAttributes
     */
    label?: WorkflowAttributesLabel;
    /**
     * 
     * @type {WorkflowAttributesLabel}
     * @memberof WorkflowAttributes
     */
    labelText?: WorkflowAttributesLabel;
    /**
     * 
     * @type {WorkflowAttributesLabel}
     * @memberof WorkflowAttributes
     */
    description?: WorkflowAttributesLabel;
    /**
     * 
     * @type {WorkflowAttributesLabel}
     * @memberof WorkflowAttributes
     */
    icon?: WorkflowAttributesLabel;
    /**
     * 
     * @type {WorkflowAttributesPosition}
     * @memberof WorkflowAttributes
     */
    position?: WorkflowAttributesPosition;
    /**
     * 
     * @type {WorkflowAttributesAttrs}
     * @memberof WorkflowAttributes
     */
    attrs?: WorkflowAttributesAttrs;
}
/**
 * 
 * @export
 * @interface WorkflowAttributesAttrs
 */
export interface WorkflowAttributesAttrs {
    /**
     * 
     * @type {WorkflowAttributesLabel}
     * @memberof WorkflowAttributesAttrs
     */
    labelText?: WorkflowAttributesLabel;
}
/**
 * 
 * @export
 * @interface WorkflowAttributesLabel
 */
export interface WorkflowAttributesLabel {
    /**
     * 
     * @type {string}
     * @memberof WorkflowAttributesLabel
     */
    text?: string;
}
/**
 * 
 * @export
 * @interface WorkflowAttributesPosition
 */
export interface WorkflowAttributesPosition {
    /**
     * 
     * @type {string}
     * @memberof WorkflowAttributesPosition
     */
    x?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowAttributesPosition
     */
    y?: string;
    /**
     * 
     * @type {number}
     * @memberof WorkflowAttributesPosition
     */
    distance?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkflowAttributesPosition
     */
    offset?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkflowAttributesPosition
     */
    angle?: number;
}
/**
 * 
 * @export
 * @interface WorkflowIa
 */
export interface WorkflowIa {
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowIa
     */
    centerAlign?: boolean;
    /**
     * 
     * @type {string}
     * @memberof WorkflowIa
     */
    locSearchLabel?: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowIa
     */
    multiSelectOptions?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowIa
     */
    typePassword?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowIa
     */
    hideResponse?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowIa
     */
    optionalResponse?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowIa
     */
    toggleResponse?: boolean;
    /**
     * 
     * @type {string}
     * @memberof WorkflowIa
     */
    enableHTML?: string;
}
/**
 * 
 * @export
 * @interface WorkflowLink
 */
export interface WorkflowLink {
    /**
     * 
     * @type {string}
     * @memberof WorkflowLink
     */
    id: string;
    /**
     * 
     * @type {Array<WorkflowAttributes>}
     * @memberof WorkflowLink
     */
    labels?: Array<WorkflowAttributes>;
    /**
     * 
     * @type {WorkflowAttributes}
     * @memberof WorkflowLink
     */
    attrs?: WorkflowAttributes;
    /**
     * 
     * @type {WorkflowLinkSource}
     * @memberof WorkflowLink
     */
    source: WorkflowLinkSource;
    /**
     * 
     * @type {WorkflowLinkSource}
     * @memberof WorkflowLink
     */
    target: WorkflowLinkSource;
    /**
     * 
     * @type {number}
     * @memberof WorkflowLink
     */
    z?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkflowLink
     */
    type?: string;
}
/**
 * 
 * @export
 * @interface WorkflowLinkSource
 */
export interface WorkflowLinkSource {
    /**
     * 
     * @type {string}
     * @memberof WorkflowLinkSource
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowLinkSource
     */
    magnet?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowLinkSource
     */
    port?: string;
}
/**
 * 
 * @export
 * @interface WorkflowPosition
 */
export interface WorkflowPosition {
    /**
     * 
     * @type {number}
     * @memberof WorkflowPosition
     */
    x?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkflowPosition
     */
    y?: number;
}
/**
 * 
 * @export
 * @interface WorkflowStep
 */
export interface WorkflowStep {
    /**
     * 
     * @type {string}
     * @memberof WorkflowStep
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowStep
     */
    type?: string;
    /**
     * 
     * @type {WorkflowStepPorts}
     * @memberof WorkflowStep
     */
    ports?: WorkflowStepPorts;
    /**
     * 
     * @type {Array<WorkflowAttributes>}
     * @memberof WorkflowStep
     */
    labels?: Array<WorkflowAttributes>;
    /**
     * 
     * @type {WorkflowAttributes}
     * @memberof WorkflowStep
     */
    attrs?: WorkflowAttributes;
    /**
     * 
     * @type {WorkflowPosition}
     * @memberof WorkflowStep
     */
    position?: WorkflowPosition;
    /**
     * 
     * @type {Array<ModuleBase | MessageModule | MenuModule | FormModule>}
     * @memberof WorkflowStep
     */
    modules: Array<ModuleBase | MessageModule | MenuModule | FormModule>;
}
/**
 * 
 * @export
 * @interface WorkflowStepPorts
 */
export interface WorkflowStepPorts {
    /**
     * 
     * @type {Array<WorkflowStepPortsItems>}
     * @memberof WorkflowStepPorts
     */
    items?: Array<WorkflowStepPortsItems>;
}
/**
 * 
 * @export
 * @interface WorkflowStepPortsItems
 */
export interface WorkflowStepPortsItems {
    /**
     * 
     * @type {string}
     * @memberof WorkflowStepPortsItems
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowStepPortsItems
     */
    group?: string;
}
/**
 * 
 * @export
 * @interface WorkflowUi
 */
export interface WorkflowUi {
    /**
     * 
     * @type {Array<WorkflowStep | WorkflowLink>}
     * @memberof WorkflowUi
     */
    cells: Array<WorkflowStep | WorkflowLink>;
    /**
     * 
     * @type {string}
     * @memberof WorkflowUi
     */
    campaignId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowUi
     */
    active?: boolean;
    /**
     * 
     * @type {LegacyWorkflowUiUeTagStructure}
     * @memberof WorkflowUi
     */
    UeTagStructure?: LegacyWorkflowUiUeTagStructure;
    /**
     * 
     * @type {string}
     * @memberof WorkflowUi
     */
    version?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowUi
     */
    welcome?: string;
    /**
     * 
     * @type {Array<LegacyWelcomeModuleSection | LegacySendIAModuleSection | LegacyMessageModuleSection | LegacyMenuModuleSection | LegacyFormModuleSection>}
     * @memberof WorkflowUi
     */
    sections: Array<LegacyWelcomeModuleSection | LegacySendIAModuleSection | LegacyMessageModuleSection | LegacyMenuModuleSection | LegacyFormModuleSection>;
}
/**
 * 
 * @export
 * @interface WorkflowVariables
 */
export interface WorkflowVariables {
    /**
     * 
     * @type {string}
     * @memberof WorkflowVariables
     */
    id?: string;
    /**
     * 
     * @type {Array<WorkflowVariablesContent>}
     * @memberof WorkflowVariables
     */
    content?: Array<WorkflowVariablesContent>;
    /**
     * 
     * @type {string}
     * @memberof WorkflowVariables
     */
    campaignId?: string;
}
/**
 * 
 * @export
 * @interface WorkflowVariablesContent
 */
export interface WorkflowVariablesContent {
    /**
     * 
     * @type {WorkflowVariablesId}
     * @memberof WorkflowVariablesContent
     */
    _id?: WorkflowVariablesId;
    /**
     * 
     * @type {Array<WorkflowVariablesVars>}
     * @memberof WorkflowVariablesContent
     */
    vars?: Array<WorkflowVariablesVars>;
}
/**
 * 
 * @export
 * @interface WorkflowVariablesId
 */
export interface WorkflowVariablesId {
    /**
     * 
     * @type {string}
     * @memberof WorkflowVariablesId
     */
    oid?: string;
}
/**
 * 
 * @export
 * @interface WorkflowVariablesVars
 */
export interface WorkflowVariablesVars {
    /**
     * 
     * @type {string}
     * @memberof WorkflowVariablesVars
     */
    variable?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowVariablesVars
     */
    desc?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowVariablesVars
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowVariablesVars
     */
    _private?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowVariablesVars
     */
    additionalProperties?: string;
}
/**
 * ContinueWorkflowSimulatorStepApi - fetch parameter creator
 * @export
 */
export const ContinueWorkflowSimulatorStepApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Continue Workflow Simulator Step
         * @summary Continue Workflow Simulator Step
         * @param {ContinueUshurRequest} [body] Continue Ushur request for Simulator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        continueUshur(body?: ContinueUshurRequest, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/ushur/continue`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ContinueUshurRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContinueWorkflowSimulatorStepApi - functional programming interface
 * @export
 */
export const ContinueWorkflowSimulatorStepApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Continue Workflow Simulator Step
         * @summary Continue Workflow Simulator Step
         * @param {ContinueUshurRequest} [body] Continue Ushur request for Simulator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        continueUshur(body?: ContinueUshurRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ContinueUshurResponse> {
            const localVarFetchArgs = ContinueWorkflowSimulatorStepApiFetchParamCreator(configuration).continueUshur(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ContinueWorkflowSimulatorStepApi - factory interface
 * @export
 */
export const ContinueWorkflowSimulatorStepApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Continue Workflow Simulator Step
         * @summary Continue Workflow Simulator Step
         * @param {ContinueUshurRequest} [body] Continue Ushur request for Simulator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        continueUshur(body?: ContinueUshurRequest, options?: any) {
            return ContinueWorkflowSimulatorStepApiFp(configuration).continueUshur(body, options)(fetch, basePath);
        },
    };
};

/**
 * ContinueWorkflowSimulatorStepApi - object-oriented interface
 * @export
 * @class ContinueWorkflowSimulatorStepApi
 * @extends {BaseAPI}
 */
export class ContinueWorkflowSimulatorStepApi extends BaseAPI {
    /**
     * Continue Workflow Simulator Step
     * @summary Continue Workflow Simulator Step
     * @param {ContinueUshurRequest} [body] Continue Ushur request for Simulator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContinueWorkflowSimulatorStepApi
     */
    public continueUshur(body?: ContinueUshurRequest, options?: any) {
        return ContinueWorkflowSimulatorStepApiFp(this.configuration).continueUshur(body, options)(this.fetch, this.basePath);
    }

}
/**
 * InitializeWorkflowSimulatorApi - fetch parameter creator
 * @export
 */
export const InitializeWorkflowSimulatorApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Initialize Workflow Simulator
         * @summary Initialize Workflow Simulator
         * @param {InitUshurRequest} [body] Init Ushur request for Simulator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initUshur(body?: InitUshurRequest, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/ushur/init`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"InitUshurRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InitializeWorkflowSimulatorApi - functional programming interface
 * @export
 */
export const InitializeWorkflowSimulatorApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Initialize Workflow Simulator
         * @summary Initialize Workflow Simulator
         * @param {InitUshurRequest} [body] Init Ushur request for Simulator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initUshur(body?: InitUshurRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InitUshurResponse> {
            const localVarFetchArgs = InitializeWorkflowSimulatorApiFetchParamCreator(configuration).initUshur(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * InitializeWorkflowSimulatorApi - factory interface
 * @export
 */
export const InitializeWorkflowSimulatorApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Initialize Workflow Simulator
         * @summary Initialize Workflow Simulator
         * @param {InitUshurRequest} [body] Init Ushur request for Simulator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initUshur(body?: InitUshurRequest, options?: any) {
            return InitializeWorkflowSimulatorApiFp(configuration).initUshur(body, options)(fetch, basePath);
        },
    };
};

/**
 * InitializeWorkflowSimulatorApi - object-oriented interface
 * @export
 * @class InitializeWorkflowSimulatorApi
 * @extends {BaseAPI}
 */
export class InitializeWorkflowSimulatorApi extends BaseAPI {
    /**
     * Initialize Workflow Simulator
     * @summary Initialize Workflow Simulator
     * @param {InitUshurRequest} [body] Init Ushur request for Simulator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InitializeWorkflowSimulatorApi
     */
    public initUshur(body?: InitUshurRequest, options?: any) {
        return InitializeWorkflowSimulatorApiFp(this.configuration).initUshur(body, options)(this.fetch, this.basePath);
    }

}
/**
 * LegacyWorkflowApi - fetch parameter creator
 * @export
 */
export const LegacyWorkflowApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Legacy workflow api
         * @summary Legacy workflow api
         * @param {CreateWorkflowLegacyRequest | GetWorkflowLegacyRequest | UpdateWorkflowLegacyRequest | GetWorkflowVariablesRequest | GetVariablesByUeTagRequest | GetTagTypesRequest | GetTagsRequest | CreateTagRequest | GetDatatableTagsRequest} [body] Legacy Workflow data that needs to change
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legacyWorkflowApi(body?: CreateWorkflowLegacyRequest | GetWorkflowLegacyRequest | UpdateWorkflowLegacyRequest | GetWorkflowVariablesRequest | GetVariablesByUeTagRequest | GetTagTypesRequest | GetTagsRequest | CreateTagRequest | GetDatatableTagsRequest, options: any = {}): FetchArgs {
            const localVarPath = `/infoQuery`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateWorkflowLegacyRequest | GetWorkflowLegacyRequest | UpdateWorkflowLegacyRequest | GetWorkflowVariablesRequest | GetVariablesByUeTagRequest | GetTagTypesRequest | GetTagsRequest | CreateTagRequest | GetDatatableTagsRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LegacyWorkflowApi - functional programming interface
 * @export
 */
export const LegacyWorkflowApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Legacy workflow api
         * @summary Legacy workflow api
         * @param {CreateWorkflowLegacyRequest | GetWorkflowLegacyRequest | UpdateWorkflowLegacyRequest | GetWorkflowVariablesRequest | GetVariablesByUeTagRequest | GetTagTypesRequest | GetTagsRequest | CreateTagRequest | GetDatatableTagsRequest} [body] Legacy Workflow data that needs to change
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legacyWorkflowApi(body?: CreateWorkflowLegacyRequest | GetWorkflowLegacyRequest | UpdateWorkflowLegacyRequest | GetWorkflowVariablesRequest | GetVariablesByUeTagRequest | GetTagTypesRequest | GetTagsRequest | CreateTagRequest | GetDatatableTagsRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2001> {
            const localVarFetchArgs = LegacyWorkflowApiFetchParamCreator(configuration).legacyWorkflowApi(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * LegacyWorkflowApi - factory interface
 * @export
 */
export const LegacyWorkflowApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Legacy workflow api
         * @summary Legacy workflow api
         * @param {CreateWorkflowLegacyRequest | GetWorkflowLegacyRequest | UpdateWorkflowLegacyRequest | GetWorkflowVariablesRequest | GetVariablesByUeTagRequest | GetTagTypesRequest | GetTagsRequest | CreateTagRequest | GetDatatableTagsRequest} [body] Legacy Workflow data that needs to change
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legacyWorkflowApi(body?: CreateWorkflowLegacyRequest | GetWorkflowLegacyRequest | UpdateWorkflowLegacyRequest | GetWorkflowVariablesRequest | GetVariablesByUeTagRequest | GetTagTypesRequest | GetTagsRequest | CreateTagRequest | GetDatatableTagsRequest, options?: any) {
            return LegacyWorkflowApiFp(configuration).legacyWorkflowApi(body, options)(fetch, basePath);
        },
    };
};

/**
 * LegacyWorkflowApi - object-oriented interface
 * @export
 * @class LegacyWorkflowApi
 * @extends {BaseAPI}
 */
export class LegacyWorkflowApi extends BaseAPI {
    /**
     * Legacy workflow api
     * @summary Legacy workflow api
     * @param {CreateWorkflowLegacyRequest | GetWorkflowLegacyRequest | UpdateWorkflowLegacyRequest | GetWorkflowVariablesRequest | GetVariablesByUeTagRequest | GetTagTypesRequest | GetTagsRequest | CreateTagRequest | GetDatatableTagsRequest} [body] Legacy Workflow data that needs to change
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegacyWorkflowApi
     */
    public legacyWorkflowApi(body?: CreateWorkflowLegacyRequest | GetWorkflowLegacyRequest | UpdateWorkflowLegacyRequest | GetWorkflowVariablesRequest | GetVariablesByUeTagRequest | GetTagTypesRequest | GetTagsRequest | CreateTagRequest | GetDatatableTagsRequest, options?: any) {
        return LegacyWorkflowApiFp(this.configuration).legacyWorkflowApi(body, options)(this.fetch, this.basePath);
    }

}
/**
 * WorkflowApi - fetch parameter creator
 * @export
 */
export const WorkflowApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new workflow
         * @summary Create a workflow
         * @param {Workflow} [body] Workflow object that needs to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflow(body?: Workflow, options: any = {}): FetchArgs {
            const localVarPath = `/workflow`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Workflow" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a workflow
         * @summary Deletes a workflow
         * @param {string} workflowId Workflow id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkflow(workflowId: string, options: any = {}): FetchArgs {
            // verify required parameter 'workflowId' is not null or undefined
            if (workflowId === null || workflowId === undefined) {
                throw new RequiredError('workflowId','Required parameter workflowId was null or undefined when calling deleteWorkflow.');
            }
            const localVarPath = `/workflow/{workflowId}`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all workflows
         * @summary Get all workflows
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllWorkflows(options: any = {}): FetchArgs {
            const localVarPath = `/workflow`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an existing workflow
         * @summary Find workflow by ID
         * @param {string} workflowId ID of workflow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowById(workflowId: string, options: any = {}): FetchArgs {
            // verify required parameter 'workflowId' is not null or undefined
            if (workflowId === null || workflowId === undefined) {
                throw new RequiredError('workflowId','Required parameter workflowId was null or undefined when calling getWorkflowById.');
            }
            const localVarPath = `/workflow/{workflowId}`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Patch a workflow
         * @summary Patch a workflow
         * @param {string} workflowId ID of workflow that needs to be patched
         * @param {Workflow} [body] Workflow data that needs to change
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkflow(workflowId: string, body?: Workflow, options: any = {}): FetchArgs {
            // verify required parameter 'workflowId' is not null or undefined
            if (workflowId === null || workflowId === undefined) {
                throw new RequiredError('workflowId','Required parameter workflowId was null or undefined when calling updateWorkflow.');
            }
            const localVarPath = `/workflow/{workflowId}`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Workflow" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkflowApi - functional programming interface
 * @export
 */
export const WorkflowApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new workflow
         * @summary Create a workflow
         * @param {Workflow} [body] Workflow object that needs to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflow(body?: Workflow, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse200> {
            const localVarFetchArgs = WorkflowApiFetchParamCreator(configuration).createWorkflow(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a workflow
         * @summary Deletes a workflow
         * @param {string} workflowId Workflow id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkflow(workflowId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = WorkflowApiFetchParamCreator(configuration).deleteWorkflow(workflowId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get all workflows
         * @summary Get all workflows
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllWorkflows(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Workflow>> {
            const localVarFetchArgs = WorkflowApiFetchParamCreator(configuration).getAllWorkflows(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns an existing workflow
         * @summary Find workflow by ID
         * @param {string} workflowId ID of workflow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowById(workflowId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse200> {
            const localVarFetchArgs = WorkflowApiFetchParamCreator(configuration).getWorkflowById(workflowId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Patch a workflow
         * @summary Patch a workflow
         * @param {string} workflowId ID of workflow that needs to be patched
         * @param {Workflow} [body] Workflow data that needs to change
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkflow(workflowId: string, body?: Workflow, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse200> {
            const localVarFetchArgs = WorkflowApiFetchParamCreator(configuration).updateWorkflow(workflowId, body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * WorkflowApi - factory interface
 * @export
 */
export const WorkflowApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Create a new workflow
         * @summary Create a workflow
         * @param {Workflow} [body] Workflow object that needs to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflow(body?: Workflow, options?: any) {
            return WorkflowApiFp(configuration).createWorkflow(body, options)(fetch, basePath);
        },
        /**
         * Delete a workflow
         * @summary Deletes a workflow
         * @param {string} workflowId Workflow id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkflow(workflowId: string, options?: any) {
            return WorkflowApiFp(configuration).deleteWorkflow(workflowId, options)(fetch, basePath);
        },
        /**
         * Get all workflows
         * @summary Get all workflows
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllWorkflows(options?: any) {
            return WorkflowApiFp(configuration).getAllWorkflows(options)(fetch, basePath);
        },
        /**
         * Returns an existing workflow
         * @summary Find workflow by ID
         * @param {string} workflowId ID of workflow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowById(workflowId: string, options?: any) {
            return WorkflowApiFp(configuration).getWorkflowById(workflowId, options)(fetch, basePath);
        },
        /**
         * Patch a workflow
         * @summary Patch a workflow
         * @param {string} workflowId ID of workflow that needs to be patched
         * @param {Workflow} [body] Workflow data that needs to change
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkflow(workflowId: string, body?: Workflow, options?: any) {
            return WorkflowApiFp(configuration).updateWorkflow(workflowId, body, options)(fetch, basePath);
        },
    };
};

/**
 * WorkflowApi - object-oriented interface
 * @export
 * @class WorkflowApi
 * @extends {BaseAPI}
 */
export class WorkflowApi extends BaseAPI {
    /**
     * Create a new workflow
     * @summary Create a workflow
     * @param {Workflow} [body] Workflow object that needs to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    public createWorkflow(body?: Workflow, options?: any) {
        return WorkflowApiFp(this.configuration).createWorkflow(body, options)(this.fetch, this.basePath);
    }

    /**
     * Delete a workflow
     * @summary Deletes a workflow
     * @param {string} workflowId Workflow id to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    public deleteWorkflow(workflowId: string, options?: any) {
        return WorkflowApiFp(this.configuration).deleteWorkflow(workflowId, options)(this.fetch, this.basePath);
    }

    /**
     * Get all workflows
     * @summary Get all workflows
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    public getAllWorkflows(options?: any) {
        return WorkflowApiFp(this.configuration).getAllWorkflows(options)(this.fetch, this.basePath);
    }

    /**
     * Returns an existing workflow
     * @summary Find workflow by ID
     * @param {string} workflowId ID of workflow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    public getWorkflowById(workflowId: string, options?: any) {
        return WorkflowApiFp(this.configuration).getWorkflowById(workflowId, options)(this.fetch, this.basePath);
    }

    /**
     * Patch a workflow
     * @summary Patch a workflow
     * @param {string} workflowId ID of workflow that needs to be patched
     * @param {Workflow} [body] Workflow data that needs to change
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    public updateWorkflow(workflowId: string, body?: Workflow, options?: any) {
        return WorkflowApiFp(this.configuration).updateWorkflow(workflowId, body, options)(this.fetch, this.basePath);
    }

}
/**
 * WorkflowActivationApi - fetch parameter creator
 * @export
 */
export const WorkflowActivationApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Workflow activation
         * @param {WorkflowActivationRequest} [body] Workflow activation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowActivation(body?: WorkflowActivationRequest, options: any = {}): FetchArgs {
            const localVarPath = `/rest/upnTable/v2/setCampaignActivation`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"WorkflowActivationRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkflowActivationApi - functional programming interface
 * @export
 */
export const WorkflowActivationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Workflow activation
         * @param {WorkflowActivationRequest} [body] Workflow activation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowActivation(body?: WorkflowActivationRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2002> {
            const localVarFetchArgs = WorkflowActivationApiFetchParamCreator(configuration).workflowActivation(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * WorkflowActivationApi - factory interface
 * @export
 */
export const WorkflowActivationApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Workflow activation
         * @param {WorkflowActivationRequest} [body] Workflow activation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowActivation(body?: WorkflowActivationRequest, options?: any) {
            return WorkflowActivationApiFp(configuration).workflowActivation(body, options)(fetch, basePath);
        },
    };
};

/**
 * WorkflowActivationApi - object-oriented interface
 * @export
 * @class WorkflowActivationApi
 * @extends {BaseAPI}
 */
export class WorkflowActivationApi extends BaseAPI {
    /**
     * Workflow activation
     * @param {WorkflowActivationRequest} [body] Workflow activation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowActivationApi
     */
    public workflowActivation(body?: WorkflowActivationRequest, options?: any) {
        return WorkflowActivationApiFp(this.configuration).workflowActivation(body, options)(this.fetch, this.basePath);
    }

}
/**
 * WorkflowStepApi - fetch parameter creator
 * @export
 */
export const WorkflowStepApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new workflow step
         * @summary Create a workflow step
         * @param {string} workflowId Workflow id to delete
         * @param {Workflow} [body] Workflow object that needs to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflowStep(workflowId: string, body?: Workflow, options: any = {}): FetchArgs {
            // verify required parameter 'workflowId' is not null or undefined
            if (workflowId === null || workflowId === undefined) {
                throw new RequiredError('workflowId','Required parameter workflowId was null or undefined when calling createWorkflowStep.');
            }
            const localVarPath = `/workflow/{workflowId}/step`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Workflow" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a workflow
         * @summary Deletes a workflow step
         * @param {string} workflowId Workflow id to delete
         * @param {string} stepId ID of step
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkflowStep(workflowId: string, stepId: string, options: any = {}): FetchArgs {
            // verify required parameter 'workflowId' is not null or undefined
            if (workflowId === null || workflowId === undefined) {
                throw new RequiredError('workflowId','Required parameter workflowId was null or undefined when calling deleteWorkflowStep.');
            }
            // verify required parameter 'stepId' is not null or undefined
            if (stepId === null || stepId === undefined) {
                throw new RequiredError('stepId','Required parameter stepId was null or undefined when calling deleteWorkflowStep.');
            }
            const localVarPath = `/workflow/{workflowId}/step/{stepId}`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)))
                .replace(`{${"stepId"}}`, encodeURIComponent(String(stepId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an existing workflow
         * @summary Find workflow step by ID
         * @param {string} workflowId ID of workflow
         * @param {string} stepId ID of step
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowByStep(workflowId: string, stepId: string, options: any = {}): FetchArgs {
            // verify required parameter 'workflowId' is not null or undefined
            if (workflowId === null || workflowId === undefined) {
                throw new RequiredError('workflowId','Required parameter workflowId was null or undefined when calling getWorkflowByStep.');
            }
            // verify required parameter 'stepId' is not null or undefined
            if (stepId === null || stepId === undefined) {
                throw new RequiredError('stepId','Required parameter stepId was null or undefined when calling getWorkflowByStep.');
            }
            const localVarPath = `/workflow/{workflowId}/step/{stepId}`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)))
                .replace(`{${"stepId"}}`, encodeURIComponent(String(stepId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch all steps for a workflow
         * @summary Fetch all steps for a workflow
         * @param {string} workflowId Workflow id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowSteps(workflowId: string, options: any = {}): FetchArgs {
            // verify required parameter 'workflowId' is not null or undefined
            if (workflowId === null || workflowId === undefined) {
                throw new RequiredError('workflowId','Required parameter workflowId was null or undefined when calling getWorkflowSteps.');
            }
            const localVarPath = `/workflow/{workflowId}/step`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Patch a workflow
         * @summary Patches a workflow step
         * @param {string} workflowId ID of workflow that needs to be patched
         * @param {string} stepId ID of step
         * @param {Workflow} [body] Workflow data that needs to change
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchWorkflowStep(workflowId: string, stepId: string, body?: Workflow, options: any = {}): FetchArgs {
            // verify required parameter 'workflowId' is not null or undefined
            if (workflowId === null || workflowId === undefined) {
                throw new RequiredError('workflowId','Required parameter workflowId was null or undefined when calling patchWorkflowStep.');
            }
            // verify required parameter 'stepId' is not null or undefined
            if (stepId === null || stepId === undefined) {
                throw new RequiredError('stepId','Required parameter stepId was null or undefined when calling patchWorkflowStep.');
            }
            const localVarPath = `/workflow/{workflowId}/step/{stepId}`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)))
                .replace(`{${"stepId"}}`, encodeURIComponent(String(stepId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Workflow" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkflowStepApi - functional programming interface
 * @export
 */
export const WorkflowStepApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new workflow step
         * @summary Create a workflow step
         * @param {string} workflowId Workflow id to delete
         * @param {Workflow} [body] Workflow object that needs to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflowStep(workflowId: string, body?: Workflow, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Workflow> {
            const localVarFetchArgs = WorkflowStepApiFetchParamCreator(configuration).createWorkflowStep(workflowId, body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a workflow
         * @summary Deletes a workflow step
         * @param {string} workflowId Workflow id to delete
         * @param {string} stepId ID of step
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkflowStep(workflowId: string, stepId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = WorkflowStepApiFetchParamCreator(configuration).deleteWorkflowStep(workflowId, stepId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns an existing workflow
         * @summary Find workflow step by ID
         * @param {string} workflowId ID of workflow
         * @param {string} stepId ID of step
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowByStep(workflowId: string, stepId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Workflow> {
            const localVarFetchArgs = WorkflowStepApiFetchParamCreator(configuration).getWorkflowByStep(workflowId, stepId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Fetch all steps for a workflow
         * @summary Fetch all steps for a workflow
         * @param {string} workflowId Workflow id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowSteps(workflowId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Workflow> {
            const localVarFetchArgs = WorkflowStepApiFetchParamCreator(configuration).getWorkflowSteps(workflowId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Patch a workflow
         * @summary Patches a workflow step
         * @param {string} workflowId ID of workflow that needs to be patched
         * @param {string} stepId ID of step
         * @param {Workflow} [body] Workflow data that needs to change
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchWorkflowStep(workflowId: string, stepId: string, body?: Workflow, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Workflow> {
            const localVarFetchArgs = WorkflowStepApiFetchParamCreator(configuration).patchWorkflowStep(workflowId, stepId, body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * WorkflowStepApi - factory interface
 * @export
 */
export const WorkflowStepApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Create a new workflow step
         * @summary Create a workflow step
         * @param {string} workflowId Workflow id to delete
         * @param {Workflow} [body] Workflow object that needs to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflowStep(workflowId: string, body?: Workflow, options?: any) {
            return WorkflowStepApiFp(configuration).createWorkflowStep(workflowId, body, options)(fetch, basePath);
        },
        /**
         * Delete a workflow
         * @summary Deletes a workflow step
         * @param {string} workflowId Workflow id to delete
         * @param {string} stepId ID of step
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkflowStep(workflowId: string, stepId: string, options?: any) {
            return WorkflowStepApiFp(configuration).deleteWorkflowStep(workflowId, stepId, options)(fetch, basePath);
        },
        /**
         * Returns an existing workflow
         * @summary Find workflow step by ID
         * @param {string} workflowId ID of workflow
         * @param {string} stepId ID of step
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowByStep(workflowId: string, stepId: string, options?: any) {
            return WorkflowStepApiFp(configuration).getWorkflowByStep(workflowId, stepId, options)(fetch, basePath);
        },
        /**
         * Fetch all steps for a workflow
         * @summary Fetch all steps for a workflow
         * @param {string} workflowId Workflow id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowSteps(workflowId: string, options?: any) {
            return WorkflowStepApiFp(configuration).getWorkflowSteps(workflowId, options)(fetch, basePath);
        },
        /**
         * Patch a workflow
         * @summary Patches a workflow step
         * @param {string} workflowId ID of workflow that needs to be patched
         * @param {string} stepId ID of step
         * @param {Workflow} [body] Workflow data that needs to change
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchWorkflowStep(workflowId: string, stepId: string, body?: Workflow, options?: any) {
            return WorkflowStepApiFp(configuration).patchWorkflowStep(workflowId, stepId, body, options)(fetch, basePath);
        },
    };
};

/**
 * WorkflowStepApi - object-oriented interface
 * @export
 * @class WorkflowStepApi
 * @extends {BaseAPI}
 */
export class WorkflowStepApi extends BaseAPI {
    /**
     * Create a new workflow step
     * @summary Create a workflow step
     * @param {string} workflowId Workflow id to delete
     * @param {Workflow} [body] Workflow object that needs to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowStepApi
     */
    public createWorkflowStep(workflowId: string, body?: Workflow, options?: any) {
        return WorkflowStepApiFp(this.configuration).createWorkflowStep(workflowId, body, options)(this.fetch, this.basePath);
    }

    /**
     * Delete a workflow
     * @summary Deletes a workflow step
     * @param {string} workflowId Workflow id to delete
     * @param {string} stepId ID of step
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowStepApi
     */
    public deleteWorkflowStep(workflowId: string, stepId: string, options?: any) {
        return WorkflowStepApiFp(this.configuration).deleteWorkflowStep(workflowId, stepId, options)(this.fetch, this.basePath);
    }

    /**
     * Returns an existing workflow
     * @summary Find workflow step by ID
     * @param {string} workflowId ID of workflow
     * @param {string} stepId ID of step
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowStepApi
     */
    public getWorkflowByStep(workflowId: string, stepId: string, options?: any) {
        return WorkflowStepApiFp(this.configuration).getWorkflowByStep(workflowId, stepId, options)(this.fetch, this.basePath);
    }

    /**
     * Fetch all steps for a workflow
     * @summary Fetch all steps for a workflow
     * @param {string} workflowId Workflow id to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowStepApi
     */
    public getWorkflowSteps(workflowId: string, options?: any) {
        return WorkflowStepApiFp(this.configuration).getWorkflowSteps(workflowId, options)(this.fetch, this.basePath);
    }

    /**
     * Patch a workflow
     * @summary Patches a workflow step
     * @param {string} workflowId ID of workflow that needs to be patched
     * @param {string} stepId ID of step
     * @param {Workflow} [body] Workflow data that needs to change
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowStepApi
     */
    public patchWorkflowStep(workflowId: string, stepId: string, body?: Workflow, options?: any) {
        return WorkflowStepApiFp(this.configuration).patchWorkflowStep(workflowId, stepId, body, options)(this.fetch, this.basePath);
    }

}
/**
 * WorkflowStepModuleApi - fetch parameter creator
 * @export
 */
export const WorkflowStepModuleApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new workflow step
         * @summary Create a workflow step
         * @param {string} workflowId Workflow id to delete
         * @param {string} stepId ID of step
         * @param {Workflow} [body] Workflow object that needs to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflowStepModule(workflowId: string, stepId: string, body?: Workflow, options: any = {}): FetchArgs {
            // verify required parameter 'workflowId' is not null or undefined
            if (workflowId === null || workflowId === undefined) {
                throw new RequiredError('workflowId','Required parameter workflowId was null or undefined when calling createWorkflowStepModule.');
            }
            // verify required parameter 'stepId' is not null or undefined
            if (stepId === null || stepId === undefined) {
                throw new RequiredError('stepId','Required parameter stepId was null or undefined when calling createWorkflowStepModule.');
            }
            const localVarPath = `/workflow/{workflowId}/step/{stepId}/module`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)))
                .replace(`{${"stepId"}}`, encodeURIComponent(String(stepId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Workflow" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a workflow
         * @summary Deletes a workflow module
         * @param {string} workflowId Workflow id to delete
         * @param {string} stepId ID of step
         * @param {string} moduleId ID of module
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkflowStepModule(workflowId: string, stepId: string, moduleId: string, options: any = {}): FetchArgs {
            // verify required parameter 'workflowId' is not null or undefined
            if (workflowId === null || workflowId === undefined) {
                throw new RequiredError('workflowId','Required parameter workflowId was null or undefined when calling deleteWorkflowStepModule.');
            }
            // verify required parameter 'stepId' is not null or undefined
            if (stepId === null || stepId === undefined) {
                throw new RequiredError('stepId','Required parameter stepId was null or undefined when calling deleteWorkflowStepModule.');
            }
            // verify required parameter 'moduleId' is not null or undefined
            if (moduleId === null || moduleId === undefined) {
                throw new RequiredError('moduleId','Required parameter moduleId was null or undefined when calling deleteWorkflowStepModule.');
            }
            const localVarPath = `/workflow/{workflowId}/step/{stepId}/module/{moduleId}`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)))
                .replace(`{${"stepId"}}`, encodeURIComponent(String(stepId)))
                .replace(`{${"moduleId"}}`, encodeURIComponent(String(moduleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all modules for a workflow step
         * @summary Get all modules for a workflow step
         * @param {string} workflowId Workflow id to delete
         * @param {string} stepId ID of step
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllWorkflowStepModules(workflowId: string, stepId: string, options: any = {}): FetchArgs {
            // verify required parameter 'workflowId' is not null or undefined
            if (workflowId === null || workflowId === undefined) {
                throw new RequiredError('workflowId','Required parameter workflowId was null or undefined when calling getAllWorkflowStepModules.');
            }
            // verify required parameter 'stepId' is not null or undefined
            if (stepId === null || stepId === undefined) {
                throw new RequiredError('stepId','Required parameter stepId was null or undefined when calling getAllWorkflowStepModules.');
            }
            const localVarPath = `/workflow/{workflowId}/step/{stepId}/module`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)))
                .replace(`{${"stepId"}}`, encodeURIComponent(String(stepId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an existing workflow
         * @summary Find workflow module by workflow id, step id and module id
         * @param {string} workflowId ID of workflow
         * @param {string} stepId ID of step
         * @param {string} moduleId ID of module
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowStepModule(workflowId: string, stepId: string, moduleId: string, options: any = {}): FetchArgs {
            // verify required parameter 'workflowId' is not null or undefined
            if (workflowId === null || workflowId === undefined) {
                throw new RequiredError('workflowId','Required parameter workflowId was null or undefined when calling getWorkflowStepModule.');
            }
            // verify required parameter 'stepId' is not null or undefined
            if (stepId === null || stepId === undefined) {
                throw new RequiredError('stepId','Required parameter stepId was null or undefined when calling getWorkflowStepModule.');
            }
            // verify required parameter 'moduleId' is not null or undefined
            if (moduleId === null || moduleId === undefined) {
                throw new RequiredError('moduleId','Required parameter moduleId was null or undefined when calling getWorkflowStepModule.');
            }
            const localVarPath = `/workflow/{workflowId}/step/{stepId}/module/{moduleId}`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)))
                .replace(`{${"stepId"}}`, encodeURIComponent(String(stepId)))
                .replace(`{${"moduleId"}}`, encodeURIComponent(String(moduleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Patch a workflow module
         * @summary Patch a workflow module
         * @param {string} workflowId ID of workflow that needs to be updated
         * @param {string} stepId ID of step
         * @param {string} moduleId ID of module
         * @param {Workflow} [body] Workflow data that needs to change
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkflowStepModule(workflowId: string, stepId: string, moduleId: string, body?: Workflow, options: any = {}): FetchArgs {
            // verify required parameter 'workflowId' is not null or undefined
            if (workflowId === null || workflowId === undefined) {
                throw new RequiredError('workflowId','Required parameter workflowId was null or undefined when calling updateWorkflowStepModule.');
            }
            // verify required parameter 'stepId' is not null or undefined
            if (stepId === null || stepId === undefined) {
                throw new RequiredError('stepId','Required parameter stepId was null or undefined when calling updateWorkflowStepModule.');
            }
            // verify required parameter 'moduleId' is not null or undefined
            if (moduleId === null || moduleId === undefined) {
                throw new RequiredError('moduleId','Required parameter moduleId was null or undefined when calling updateWorkflowStepModule.');
            }
            const localVarPath = `/workflow/{workflowId}/step/{stepId}/module/{moduleId}`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)))
                .replace(`{${"stepId"}}`, encodeURIComponent(String(stepId)))
                .replace(`{${"moduleId"}}`, encodeURIComponent(String(moduleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Workflow" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkflowStepModuleApi - functional programming interface
 * @export
 */
export const WorkflowStepModuleApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new workflow step
         * @summary Create a workflow step
         * @param {string} workflowId Workflow id to delete
         * @param {string} stepId ID of step
         * @param {Workflow} [body] Workflow object that needs to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflowStepModule(workflowId: string, stepId: string, body?: Workflow, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Workflow> {
            const localVarFetchArgs = WorkflowStepModuleApiFetchParamCreator(configuration).createWorkflowStepModule(workflowId, stepId, body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a workflow
         * @summary Deletes a workflow module
         * @param {string} workflowId Workflow id to delete
         * @param {string} stepId ID of step
         * @param {string} moduleId ID of module
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkflowStepModule(workflowId: string, stepId: string, moduleId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Workflow> {
            const localVarFetchArgs = WorkflowStepModuleApiFetchParamCreator(configuration).deleteWorkflowStepModule(workflowId, stepId, moduleId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get all modules for a workflow step
         * @summary Get all modules for a workflow step
         * @param {string} workflowId Workflow id to delete
         * @param {string} stepId ID of step
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllWorkflowStepModules(workflowId: string, stepId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Workflow> {
            const localVarFetchArgs = WorkflowStepModuleApiFetchParamCreator(configuration).getAllWorkflowStepModules(workflowId, stepId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns an existing workflow
         * @summary Find workflow module by workflow id, step id and module id
         * @param {string} workflowId ID of workflow
         * @param {string} stepId ID of step
         * @param {string} moduleId ID of module
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowStepModule(workflowId: string, stepId: string, moduleId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Workflow> {
            const localVarFetchArgs = WorkflowStepModuleApiFetchParamCreator(configuration).getWorkflowStepModule(workflowId, stepId, moduleId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Patch a workflow module
         * @summary Patch a workflow module
         * @param {string} workflowId ID of workflow that needs to be updated
         * @param {string} stepId ID of step
         * @param {string} moduleId ID of module
         * @param {Workflow} [body] Workflow data that needs to change
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkflowStepModule(workflowId: string, stepId: string, moduleId: string, body?: Workflow, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Workflow> {
            const localVarFetchArgs = WorkflowStepModuleApiFetchParamCreator(configuration).updateWorkflowStepModule(workflowId, stepId, moduleId, body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * WorkflowStepModuleApi - factory interface
 * @export
 */
export const WorkflowStepModuleApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Create a new workflow step
         * @summary Create a workflow step
         * @param {string} workflowId Workflow id to delete
         * @param {string} stepId ID of step
         * @param {Workflow} [body] Workflow object that needs to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflowStepModule(workflowId: string, stepId: string, body?: Workflow, options?: any) {
            return WorkflowStepModuleApiFp(configuration).createWorkflowStepModule(workflowId, stepId, body, options)(fetch, basePath);
        },
        /**
         * Delete a workflow
         * @summary Deletes a workflow module
         * @param {string} workflowId Workflow id to delete
         * @param {string} stepId ID of step
         * @param {string} moduleId ID of module
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkflowStepModule(workflowId: string, stepId: string, moduleId: string, options?: any) {
            return WorkflowStepModuleApiFp(configuration).deleteWorkflowStepModule(workflowId, stepId, moduleId, options)(fetch, basePath);
        },
        /**
         * Get all modules for a workflow step
         * @summary Get all modules for a workflow step
         * @param {string} workflowId Workflow id to delete
         * @param {string} stepId ID of step
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllWorkflowStepModules(workflowId: string, stepId: string, options?: any) {
            return WorkflowStepModuleApiFp(configuration).getAllWorkflowStepModules(workflowId, stepId, options)(fetch, basePath);
        },
        /**
         * Returns an existing workflow
         * @summary Find workflow module by workflow id, step id and module id
         * @param {string} workflowId ID of workflow
         * @param {string} stepId ID of step
         * @param {string} moduleId ID of module
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowStepModule(workflowId: string, stepId: string, moduleId: string, options?: any) {
            return WorkflowStepModuleApiFp(configuration).getWorkflowStepModule(workflowId, stepId, moduleId, options)(fetch, basePath);
        },
        /**
         * Patch a workflow module
         * @summary Patch a workflow module
         * @param {string} workflowId ID of workflow that needs to be updated
         * @param {string} stepId ID of step
         * @param {string} moduleId ID of module
         * @param {Workflow} [body] Workflow data that needs to change
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkflowStepModule(workflowId: string, stepId: string, moduleId: string, body?: Workflow, options?: any) {
            return WorkflowStepModuleApiFp(configuration).updateWorkflowStepModule(workflowId, stepId, moduleId, body, options)(fetch, basePath);
        },
    };
};

/**
 * WorkflowStepModuleApi - object-oriented interface
 * @export
 * @class WorkflowStepModuleApi
 * @extends {BaseAPI}
 */
export class WorkflowStepModuleApi extends BaseAPI {
    /**
     * Create a new workflow step
     * @summary Create a workflow step
     * @param {string} workflowId Workflow id to delete
     * @param {string} stepId ID of step
     * @param {Workflow} [body] Workflow object that needs to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowStepModuleApi
     */
    public createWorkflowStepModule(workflowId: string, stepId: string, body?: Workflow, options?: any) {
        return WorkflowStepModuleApiFp(this.configuration).createWorkflowStepModule(workflowId, stepId, body, options)(this.fetch, this.basePath);
    }

    /**
     * Delete a workflow
     * @summary Deletes a workflow module
     * @param {string} workflowId Workflow id to delete
     * @param {string} stepId ID of step
     * @param {string} moduleId ID of module
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowStepModuleApi
     */
    public deleteWorkflowStepModule(workflowId: string, stepId: string, moduleId: string, options?: any) {
        return WorkflowStepModuleApiFp(this.configuration).deleteWorkflowStepModule(workflowId, stepId, moduleId, options)(this.fetch, this.basePath);
    }

    /**
     * Get all modules for a workflow step
     * @summary Get all modules for a workflow step
     * @param {string} workflowId Workflow id to delete
     * @param {string} stepId ID of step
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowStepModuleApi
     */
    public getAllWorkflowStepModules(workflowId: string, stepId: string, options?: any) {
        return WorkflowStepModuleApiFp(this.configuration).getAllWorkflowStepModules(workflowId, stepId, options)(this.fetch, this.basePath);
    }

    /**
     * Returns an existing workflow
     * @summary Find workflow module by workflow id, step id and module id
     * @param {string} workflowId ID of workflow
     * @param {string} stepId ID of step
     * @param {string} moduleId ID of module
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowStepModuleApi
     */
    public getWorkflowStepModule(workflowId: string, stepId: string, moduleId: string, options?: any) {
        return WorkflowStepModuleApiFp(this.configuration).getWorkflowStepModule(workflowId, stepId, moduleId, options)(this.fetch, this.basePath);
    }

    /**
     * Patch a workflow module
     * @summary Patch a workflow module
     * @param {string} workflowId ID of workflow that needs to be updated
     * @param {string} stepId ID of step
     * @param {string} moduleId ID of module
     * @param {Workflow} [body] Workflow data that needs to change
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowStepModuleApi
     */
    public updateWorkflowStepModule(workflowId: string, stepId: string, moduleId: string, body?: Workflow, options?: any) {
        return WorkflowStepModuleApiFp(this.configuration).updateWorkflowStepModule(workflowId, stepId, moduleId, body, options)(this.fetch, this.basePath);
    }

}
